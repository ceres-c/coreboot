/* generated by gen_inst.py */

/** \defgroup UJMP
 *  @{
 */
#define UJMP_I(imm) ( _UJMP | INSTR_I1(imm) )
#define UJMP_R(src) ( _UJMP | INSTR_R1(src) )
/** @} */
/** \defgroup MOVE
 *  @{
 */
#define MOVE_DSZ8_DR(dst, src) ( _MOVE_DSZ8 | INSTR_DR0(dst, src) )
#define MOVE_DSZ8_DI(dst, imm) ( _MOVE_DSZ8 | INSTR_DI0(dst, imm) )
#define MOVE_DSZ8_DM(dst, macro) ( _MOVE_DSZ8 | INSTR_DM0(dst, macro) )
#define MOVE_DSZ16_DR(dst, src) ( _MOVE_DSZ16 | INSTR_DR0(dst, src) )
#define MOVE_DSZ16_DI(dst, imm) ( _MOVE_DSZ16 | INSTR_DI0(dst, imm) )
#define MOVE_DSZ16_DM(dst, macro) ( _MOVE_DSZ16 | INSTR_DM0(dst, macro) )
#define MOVE_DSZ32_DR(dst, src) ( _MOVE_DSZ32 | INSTR_DR0(dst, src) )
#define MOVE_DSZ32_DI(dst, imm) ( _MOVE_DSZ32 | INSTR_DI0(dst, imm) )
#define MOVE_DSZ32_DM(dst, macro) ( _MOVE_DSZ32 | INSTR_DM0(dst, macro) )
#define MOVE_DSZ64_DR(dst, src) ( _MOVE_DSZ64 | INSTR_DR0(dst, src) )
#define MOVE_DSZ64_DI(dst, imm) ( _MOVE_DSZ64 | INSTR_DI0(dst, imm) )
#define MOVE_DSZ64_DM(dst, macro) ( _MOVE_DSZ64 | INSTR_DM0(dst, macro) )
/** @} */
/** \defgroup ZEROEXT
 *  @{
 */
#define ZEROEXT_DSZ8_DR(dst, src) ( _ZEROEXT_DSZ8 | INSTR_DR0(dst, src) )
#define ZEROEXT_DSZ8_DI(dst, imm) ( _ZEROEXT_DSZ8 | INSTR_DI0(dst, imm) )
#define ZEROEXT_DSZ8_DM(dst, macro) ( _ZEROEXT_DSZ8 | INSTR_DM0(dst, macro) )
#define ZEROEXT_DSZ8_DRR(dst, src0, src1) ( _ZEROEXT_DSZ8 | INSTR_DRR(dst, src0, src1) )
#define ZEROEXT_DSZ8_DIR(dst, imm, src) ( _ZEROEXT_DSZ8 | INSTR_DIR(dst, imm, src) )
#define ZEROEXT_DSZ8_DMR(dst, macro, src) ( _ZEROEXT_DSZ8 | INSTR_DMR(dst, macro, src) )
#define ZEROEXT_DSZ16_DR(dst, src) ( _ZEROEXT_DSZ16 | INSTR_DR0(dst, src) )
#define ZEROEXT_DSZ16_DI(dst, imm) ( _ZEROEXT_DSZ16 | INSTR_DI0(dst, imm) )
#define ZEROEXT_DSZ16_DM(dst, macro) ( _ZEROEXT_DSZ16 | INSTR_DM0(dst, macro) )
#define ZEROEXT_DSZ16_DRR(dst, src0, src1) ( _ZEROEXT_DSZ16 | INSTR_DRR(dst, src0, src1) )
#define ZEROEXT_DSZ16_DIR(dst, imm, src) ( _ZEROEXT_DSZ16 | INSTR_DIR(dst, imm, src) )
#define ZEROEXT_DSZ16_DMR(dst, macro, src) ( _ZEROEXT_DSZ16 | INSTR_DMR(dst, macro, src) )
#define ZEROEXT_DSZ32_DR(dst, src) ( _ZEROEXT_DSZ32 | INSTR_DR0(dst, src) )
#define ZEROEXT_DSZ32_DI(dst, imm) ( _ZEROEXT_DSZ32 | INSTR_DI0(dst, imm) )
#define ZEROEXT_DSZ32_DM(dst, macro) ( _ZEROEXT_DSZ32 | INSTR_DM0(dst, macro) )
#define ZEROEXT_DSZ32_DRR(dst, src0, src1) ( _ZEROEXT_DSZ32 | INSTR_DRR(dst, src0, src1) )
#define ZEROEXT_DSZ32_DIR(dst, imm, src) ( _ZEROEXT_DSZ32 | INSTR_DIR(dst, imm, src) )
#define ZEROEXT_DSZ32_DMR(dst, macro, src) ( _ZEROEXT_DSZ32 | INSTR_DMR(dst, macro, src) )
#define ZEROEXT_DSZ64_DR(dst, src) ( _ZEROEXT_DSZ64 | INSTR_DR0(dst, src) )
#define ZEROEXT_DSZ64_DI(dst, imm) ( _ZEROEXT_DSZ64 | INSTR_DI0(dst, imm) )
#define ZEROEXT_DSZ64_DM(dst, macro) ( _ZEROEXT_DSZ64 | INSTR_DM0(dst, macro) )
#define ZEROEXT_DSZ64_DRR(dst, src0, src1) ( _ZEROEXT_DSZ64 | INSTR_DRR(dst, src0, src1) )
#define ZEROEXT_DSZ64_DIR(dst, imm, src) ( _ZEROEXT_DSZ64 | INSTR_DIR(dst, imm, src) )
#define ZEROEXT_DSZ64_DMR(dst, macro, src) ( _ZEROEXT_DSZ64 | INSTR_DMR(dst, macro, src) )
/** @} */
/** \defgroup MOVETOCREG
 *  @{
 */
#define MOVETOCREG_DSZ8_RI(src, imm) ( _MOVETOCREG_DSZ8 | INSTR_RI(src, imm) | MOD2 )
#define MOVETOCREG_DSZ8_RR(src0, src1) ( _MOVETOCREG_DSZ8 | INSTR_RR(src0, src1) | MOD2 )
#define MOVETOCREG_DSZ16_RI(src, imm) ( _MOVETOCREG_DSZ16 | INSTR_RI(src, imm) | MOD2 )
#define MOVETOCREG_DSZ16_RR(src0, src1) ( _MOVETOCREG_DSZ16 | INSTR_RR(src0, src1) | MOD2 )
#define MOVETOCREG_DSZ32_RI(src, imm) ( _MOVETOCREG_DSZ32 | INSTR_RI(src, imm) | MOD2 )
#define MOVETOCREG_DSZ32_RR(src0, src1) ( _MOVETOCREG_DSZ32 | INSTR_RR(src0, src1) | MOD2 )
#define MOVETOCREG_DSZ64_RI(src, imm) ( _MOVETOCREG_DSZ64 | INSTR_RI(src, imm) | MOD2 )
#define MOVETOCREG_DSZ64_RR(src0, src1) ( _MOVETOCREG_DSZ64 | INSTR_RR(src0, src1) | MOD2 )
/** @} */
/** \defgroup MOVEFROMCREG
 *  @{
 */
#define MOVEFROMCREG_DSZ8_DI(dst, imm) ( _MOVEFROMCREG_DSZ8 | INSTR_DI1(dst, imm) | MOD2 )
#define MOVEFROMCREG_DSZ8_DR(dst, src) ( _MOVEFROMCREG_DSZ8 | INSTR_DR1(dst, src) | MOD2 )
#define MOVEFROMCREG_DSZ16_DI(dst, imm) ( _MOVEFROMCREG_DSZ16 | INSTR_DI1(dst, imm) | MOD2 )
#define MOVEFROMCREG_DSZ16_DR(dst, src) ( _MOVEFROMCREG_DSZ16 | INSTR_DR1(dst, src) | MOD2 )
#define MOVEFROMCREG_DSZ32_DI(dst, imm) ( _MOVEFROMCREG_DSZ32 | INSTR_DI1(dst, imm) | MOD2 )
#define MOVEFROMCREG_DSZ32_DR(dst, src) ( _MOVEFROMCREG_DSZ32 | INSTR_DR1(dst, src) | MOD2 )
#define MOVEFROMCREG_DSZ64_DI(dst, imm) ( _MOVEFROMCREG_DSZ64 | INSTR_DI1(dst, imm) | MOD2 )
#define MOVEFROMCREG_DSZ64_DR(dst, src) ( _MOVEFROMCREG_DSZ64 | INSTR_DR1(dst, src) | MOD2 )
/** @} */
/** \defgroup WRITEURAM
 *  @{
 */
#define WRITEURAM_RI(src, imm) ( _WRITEURAM | INSTR_RI(src, imm) | MOD2 )
#define WRITEURAM_RR(src0, src1) ( _WRITEURAM | INSTR_RR(src0, src1) | MOD2 )
/** @} */
/** \defgroup READURAM
 *  @{
 */
#define READURAM_DI(dst, imm) ( _READURAM | INSTR_DI1(dst, imm) | MOD2 )
#define READURAM_DR(dst, src) ( _READURAM | INSTR_DR1(dst, src) | MOD2 )
/** @} */
/** \defgroup MSR2CR
 *  @{
 */
#define MSR2CR_DR(dst, src) ( _MSR2CR | INSTR_DR1(dst, src) )
#define MSR2CR_DI(dst, imm) ( _MSR2CR | INSTR_DI1(dst, imm) )
/** @} */
/** \defgroup WRMSLOOPCTRFBR
 *  @{
 */
#define WRMSLOOPCTRFBR_I(imm) ( _WRMSLOOPCTRFBR | INSTR_I1(imm) )
/** @} */
/** \defgroup GENARITHFLAGS
 *  @{
 */
#define GENARITHFLAGS_R(src) ( _GENARITHFLAGS | INSTR_R0(src) | MOD2 )
#define GENARITHFLAGS_RR(src0, src1) ( _GENARITHFLAGS | INSTR_RR(src0, src1) | MOD2 )
#define GENARITHFLAGS_IR(imm, src) ( _GENARITHFLAGS | INSTR_IR(imm, src) | MOD2 )
/** @} */
/** \defgroup SIGEVENT
 *  @{
 */
#define SIGEVENT_I(imm) ( _SIGEVENT | INSTR_I1(imm) )
#define SIGEVENT_RI(src, imm) ( _SIGEVENT | INSTR_RI(src, imm) )
#define SIGEVENT_DI(dst, imm) ( _SIGEVENT | INSTR_DI1(dst, imm) )
#define SIGEVENT_DRI(dst, src, imm) ( _SIGEVENT | INSTR_DRI(dst, src, imm) )
#define SIGEVENT_IR(imm, src) ( _SIGEVENT | INSTR_IR(imm, src) )
#define SIGEVENT_DIR(dst, imm, src) ( _SIGEVENT | INSTR_DIR(dst, imm, src) )
/** @} */
/** \defgroup READAFLAGS
 *  @{
 */
#define READAFLAGS_DR(dst, src) ( _READAFLAGS | INSTR_DR1(dst, src) | MOD2 )
/** @} */
/** \defgroup FPREADROM_DTYPENOP
 *  @{
 */
#define FPREADROM_DTYPENOP_DR(dst, src) ( _FPREADROM_DTYPENOP | INSTR_DR0(dst, src) )
/** @} */
/** \defgroup ADD
 *  @{
 */
#define ADD_DSZ8_DRI(dst, src, imm) ( _ADD_DSZ8 | INSTR_DRI(dst, src, imm) )
#define ADD_DSZ8_DIR(dst, imm, src) ( _ADD_DSZ8 | INSTR_DIR(dst, imm, src) )
#define ADD_DSZ8_DRM(dst, src, macro) ( _ADD_DSZ8 | INSTR_DRM(dst, src, macro) )
#define ADD_DSZ8_DMR(dst, macro, src) ( _ADD_DSZ8 | INSTR_DMR(dst, macro, src) )
#define ADD_DSZ8_DRR(dst, src0, src1) ( _ADD_DSZ8 | INSTR_DRR(dst, src0, src1) )
#define ADD_DSZ16_DRI(dst, src, imm) ( _ADD_DSZ16 | INSTR_DRI(dst, src, imm) )
#define ADD_DSZ16_DIR(dst, imm, src) ( _ADD_DSZ16 | INSTR_DIR(dst, imm, src) )
#define ADD_DSZ16_DRM(dst, src, macro) ( _ADD_DSZ16 | INSTR_DRM(dst, src, macro) )
#define ADD_DSZ16_DMR(dst, macro, src) ( _ADD_DSZ16 | INSTR_DMR(dst, macro, src) )
#define ADD_DSZ16_DRR(dst, src0, src1) ( _ADD_DSZ16 | INSTR_DRR(dst, src0, src1) )
#define ADD_DSZ32_DRI(dst, src, imm) ( _ADD_DSZ32 | INSTR_DRI(dst, src, imm) )
#define ADD_DSZ32_DIR(dst, imm, src) ( _ADD_DSZ32 | INSTR_DIR(dst, imm, src) )
#define ADD_DSZ32_DRM(dst, src, macro) ( _ADD_DSZ32 | INSTR_DRM(dst, src, macro) )
#define ADD_DSZ32_DMR(dst, macro, src) ( _ADD_DSZ32 | INSTR_DMR(dst, macro, src) )
#define ADD_DSZ32_DRR(dst, src0, src1) ( _ADD_DSZ32 | INSTR_DRR(dst, src0, src1) )
#define ADD_DSZ64_DRI(dst, src, imm) ( _ADD_DSZ64 | INSTR_DRI(dst, src, imm) )
#define ADD_DSZ64_DIR(dst, imm, src) ( _ADD_DSZ64 | INSTR_DIR(dst, imm, src) )
#define ADD_DSZ64_DRM(dst, src, macro) ( _ADD_DSZ64 | INSTR_DRM(dst, src, macro) )
#define ADD_DSZ64_DMR(dst, macro, src) ( _ADD_DSZ64 | INSTR_DMR(dst, macro, src) )
#define ADD_DSZ64_DRR(dst, src0, src1) ( _ADD_DSZ64 | INSTR_DRR(dst, src0, src1) )
/** @} */
/** \defgroup OR
 *  @{
 */
#define OR_DSZ8_DRI(dst, src, imm) ( _OR_DSZ8 | INSTR_DRI(dst, src, imm) )
#define OR_DSZ8_DIR(dst, imm, src) ( _OR_DSZ8 | INSTR_DIR(dst, imm, src) )
#define OR_DSZ8_DRM(dst, src, macro) ( _OR_DSZ8 | INSTR_DRM(dst, src, macro) )
#define OR_DSZ8_DMR(dst, macro, src) ( _OR_DSZ8 | INSTR_DMR(dst, macro, src) )
#define OR_DSZ8_DRR(dst, src0, src1) ( _OR_DSZ8 | INSTR_DRR(dst, src0, src1) )
#define OR_DSZ16_DRI(dst, src, imm) ( _OR_DSZ16 | INSTR_DRI(dst, src, imm) )
#define OR_DSZ16_DIR(dst, imm, src) ( _OR_DSZ16 | INSTR_DIR(dst, imm, src) )
#define OR_DSZ16_DRM(dst, src, macro) ( _OR_DSZ16 | INSTR_DRM(dst, src, macro) )
#define OR_DSZ16_DMR(dst, macro, src) ( _OR_DSZ16 | INSTR_DMR(dst, macro, src) )
#define OR_DSZ16_DRR(dst, src0, src1) ( _OR_DSZ16 | INSTR_DRR(dst, src0, src1) )
#define OR_DSZ32_DRI(dst, src, imm) ( _OR_DSZ32 | INSTR_DRI(dst, src, imm) )
#define OR_DSZ32_DIR(dst, imm, src) ( _OR_DSZ32 | INSTR_DIR(dst, imm, src) )
#define OR_DSZ32_DRM(dst, src, macro) ( _OR_DSZ32 | INSTR_DRM(dst, src, macro) )
#define OR_DSZ32_DMR(dst, macro, src) ( _OR_DSZ32 | INSTR_DMR(dst, macro, src) )
#define OR_DSZ32_DRR(dst, src0, src1) ( _OR_DSZ32 | INSTR_DRR(dst, src0, src1) )
#define OR_DSZ64_DRI(dst, src, imm) ( _OR_DSZ64 | INSTR_DRI(dst, src, imm) )
#define OR_DSZ64_DIR(dst, imm, src) ( _OR_DSZ64 | INSTR_DIR(dst, imm, src) )
#define OR_DSZ64_DRM(dst, src, macro) ( _OR_DSZ64 | INSTR_DRM(dst, src, macro) )
#define OR_DSZ64_DMR(dst, macro, src) ( _OR_DSZ64 | INSTR_DMR(dst, macro, src) )
#define OR_DSZ64_DRR(dst, src0, src1) ( _OR_DSZ64 | INSTR_DRR(dst, src0, src1) )
/** @} */
/** \defgroup AND
 *  @{
 */
#define AND_DSZ8_DRI(dst, src, imm) ( _AND_DSZ8 | INSTR_DRI(dst, src, imm) )
#define AND_DSZ8_DIR(dst, imm, src) ( _AND_DSZ8 | INSTR_DIR(dst, imm, src) )
#define AND_DSZ8_DRM(dst, src, macro) ( _AND_DSZ8 | INSTR_DRM(dst, src, macro) )
#define AND_DSZ8_DMR(dst, macro, src) ( _AND_DSZ8 | INSTR_DMR(dst, macro, src) )
#define AND_DSZ8_DRR(dst, src0, src1) ( _AND_DSZ8 | INSTR_DRR(dst, src0, src1) )
#define AND_DSZ16_DRI(dst, src, imm) ( _AND_DSZ16 | INSTR_DRI(dst, src, imm) )
#define AND_DSZ16_DIR(dst, imm, src) ( _AND_DSZ16 | INSTR_DIR(dst, imm, src) )
#define AND_DSZ16_DRM(dst, src, macro) ( _AND_DSZ16 | INSTR_DRM(dst, src, macro) )
#define AND_DSZ16_DMR(dst, macro, src) ( _AND_DSZ16 | INSTR_DMR(dst, macro, src) )
#define AND_DSZ16_DRR(dst, src0, src1) ( _AND_DSZ16 | INSTR_DRR(dst, src0, src1) )
#define AND_DSZ32_DRI(dst, src, imm) ( _AND_DSZ32 | INSTR_DRI(dst, src, imm) )
#define AND_DSZ32_DIR(dst, imm, src) ( _AND_DSZ32 | INSTR_DIR(dst, imm, src) )
#define AND_DSZ32_DRM(dst, src, macro) ( _AND_DSZ32 | INSTR_DRM(dst, src, macro) )
#define AND_DSZ32_DMR(dst, macro, src) ( _AND_DSZ32 | INSTR_DMR(dst, macro, src) )
#define AND_DSZ32_DRR(dst, src0, src1) ( _AND_DSZ32 | INSTR_DRR(dst, src0, src1) )
#define AND_DSZ64_DRI(dst, src, imm) ( _AND_DSZ64 | INSTR_DRI(dst, src, imm) )
#define AND_DSZ64_DIR(dst, imm, src) ( _AND_DSZ64 | INSTR_DIR(dst, imm, src) )
#define AND_DSZ64_DRM(dst, src, macro) ( _AND_DSZ64 | INSTR_DRM(dst, src, macro) )
#define AND_DSZ64_DMR(dst, macro, src) ( _AND_DSZ64 | INSTR_DMR(dst, macro, src) )
#define AND_DSZ64_DRR(dst, src0, src1) ( _AND_DSZ64 | INSTR_DRR(dst, src0, src1) )
/** @} */
/** \defgroup SUB
 *  @{
 */
#define SUB_DSZ8_DRI(dst, src, imm) ( _SUB_DSZ8 | INSTR_DRI(dst, src, imm) )
#define SUB_DSZ8_DIR(dst, imm, src) ( _SUB_DSZ8 | INSTR_DIR(dst, imm, src) )
#define SUB_DSZ8_DRM(dst, src, macro) ( _SUB_DSZ8 | INSTR_DRM(dst, src, macro) )
#define SUB_DSZ8_DMR(dst, macro, src) ( _SUB_DSZ8 | INSTR_DMR(dst, macro, src) )
#define SUB_DSZ8_DRR(dst, src0, src1) ( _SUB_DSZ8 | INSTR_DRR(dst, src0, src1) )
#define SUB_DSZ16_DRI(dst, src, imm) ( _SUB_DSZ16 | INSTR_DRI(dst, src, imm) )
#define SUB_DSZ16_DIR(dst, imm, src) ( _SUB_DSZ16 | INSTR_DIR(dst, imm, src) )
#define SUB_DSZ16_DRM(dst, src, macro) ( _SUB_DSZ16 | INSTR_DRM(dst, src, macro) )
#define SUB_DSZ16_DMR(dst, macro, src) ( _SUB_DSZ16 | INSTR_DMR(dst, macro, src) )
#define SUB_DSZ16_DRR(dst, src0, src1) ( _SUB_DSZ16 | INSTR_DRR(dst, src0, src1) )
#define SUB_DSZ32_DRI(dst, src, imm) ( _SUB_DSZ32 | INSTR_DRI(dst, src, imm) )
#define SUB_DSZ32_DIR(dst, imm, src) ( _SUB_DSZ32 | INSTR_DIR(dst, imm, src) )
#define SUB_DSZ32_DRM(dst, src, macro) ( _SUB_DSZ32 | INSTR_DRM(dst, src, macro) )
#define SUB_DSZ32_DMR(dst, macro, src) ( _SUB_DSZ32 | INSTR_DMR(dst, macro, src) )
#define SUB_DSZ32_DRR(dst, src0, src1) ( _SUB_DSZ32 | INSTR_DRR(dst, src0, src1) )
#define SUB_DSZ64_DRI(dst, src, imm) ( _SUB_DSZ64 | INSTR_DRI(dst, src, imm) )
#define SUB_DSZ64_DIR(dst, imm, src) ( _SUB_DSZ64 | INSTR_DIR(dst, imm, src) )
#define SUB_DSZ64_DRM(dst, src, macro) ( _SUB_DSZ64 | INSTR_DRM(dst, src, macro) )
#define SUB_DSZ64_DMR(dst, macro, src) ( _SUB_DSZ64 | INSTR_DMR(dst, macro, src) )
#define SUB_DSZ64_DRR(dst, src0, src1) ( _SUB_DSZ64 | INSTR_DRR(dst, src0, src1) )
/** @} */
/** \defgroup SUBR
 *  @{
 */
#define SUBR_DSZ8_DRI(dst, src, imm) ( _SUBR_DSZ8 | INSTR_DRI(dst, src, imm) )
#define SUBR_DSZ8_DIR(dst, imm, src) ( _SUBR_DSZ8 | INSTR_DIR(dst, imm, src) )
#define SUBR_DSZ8_DRM(dst, src, macro) ( _SUBR_DSZ8 | INSTR_DRM(dst, src, macro) )
#define SUBR_DSZ8_DMR(dst, macro, src) ( _SUBR_DSZ8 | INSTR_DMR(dst, macro, src) )
#define SUBR_DSZ8_DRR(dst, src0, src1) ( _SUBR_DSZ8 | INSTR_DRR(dst, src0, src1) )
#define SUBR_DSZ16_DRI(dst, src, imm) ( _SUBR_DSZ16 | INSTR_DRI(dst, src, imm) )
#define SUBR_DSZ16_DIR(dst, imm, src) ( _SUBR_DSZ16 | INSTR_DIR(dst, imm, src) )
#define SUBR_DSZ16_DRM(dst, src, macro) ( _SUBR_DSZ16 | INSTR_DRM(dst, src, macro) )
#define SUBR_DSZ16_DMR(dst, macro, src) ( _SUBR_DSZ16 | INSTR_DMR(dst, macro, src) )
#define SUBR_DSZ16_DRR(dst, src0, src1) ( _SUBR_DSZ16 | INSTR_DRR(dst, src0, src1) )
#define SUBR_DSZ32_DRI(dst, src, imm) ( _SUBR_DSZ32 | INSTR_DRI(dst, src, imm) )
#define SUBR_DSZ32_DIR(dst, imm, src) ( _SUBR_DSZ32 | INSTR_DIR(dst, imm, src) )
#define SUBR_DSZ32_DRM(dst, src, macro) ( _SUBR_DSZ32 | INSTR_DRM(dst, src, macro) )
#define SUBR_DSZ32_DMR(dst, macro, src) ( _SUBR_DSZ32 | INSTR_DMR(dst, macro, src) )
#define SUBR_DSZ32_DRR(dst, src0, src1) ( _SUBR_DSZ32 | INSTR_DRR(dst, src0, src1) )
#define SUBR_DSZ64_DRI(dst, src, imm) ( _SUBR_DSZ64 | INSTR_DRI(dst, src, imm) )
#define SUBR_DSZ64_DIR(dst, imm, src) ( _SUBR_DSZ64 | INSTR_DIR(dst, imm, src) )
#define SUBR_DSZ64_DRM(dst, src, macro) ( _SUBR_DSZ64 | INSTR_DRM(dst, src, macro) )
#define SUBR_DSZ64_DMR(dst, macro, src) ( _SUBR_DSZ64 | INSTR_DMR(dst, macro, src) )
#define SUBR_DSZ64_DRR(dst, src0, src1) ( _SUBR_DSZ64 | INSTR_DRR(dst, src0, src1) )
/** @} */
/** \defgroup XOR
 *  @{
 */
#define XOR_DSZ8_DRI(dst, src, imm) ( _XOR_DSZ8 | INSTR_DRI(dst, src, imm) )
#define XOR_DSZ8_DIR(dst, imm, src) ( _XOR_DSZ8 | INSTR_DIR(dst, imm, src) )
#define XOR_DSZ8_DRM(dst, src, macro) ( _XOR_DSZ8 | INSTR_DRM(dst, src, macro) )
#define XOR_DSZ8_DMR(dst, macro, src) ( _XOR_DSZ8 | INSTR_DMR(dst, macro, src) )
#define XOR_DSZ8_DRR(dst, src0, src1) ( _XOR_DSZ8 | INSTR_DRR(dst, src0, src1) )
#define XOR_DSZ16_DRI(dst, src, imm) ( _XOR_DSZ16 | INSTR_DRI(dst, src, imm) )
#define XOR_DSZ16_DIR(dst, imm, src) ( _XOR_DSZ16 | INSTR_DIR(dst, imm, src) )
#define XOR_DSZ16_DRM(dst, src, macro) ( _XOR_DSZ16 | INSTR_DRM(dst, src, macro) )
#define XOR_DSZ16_DMR(dst, macro, src) ( _XOR_DSZ16 | INSTR_DMR(dst, macro, src) )
#define XOR_DSZ16_DRR(dst, src0, src1) ( _XOR_DSZ16 | INSTR_DRR(dst, src0, src1) )
#define XOR_DSZ32_DRI(dst, src, imm) ( _XOR_DSZ32 | INSTR_DRI(dst, src, imm) )
#define XOR_DSZ32_DIR(dst, imm, src) ( _XOR_DSZ32 | INSTR_DIR(dst, imm, src) )
#define XOR_DSZ32_DRM(dst, src, macro) ( _XOR_DSZ32 | INSTR_DRM(dst, src, macro) )
#define XOR_DSZ32_DMR(dst, macro, src) ( _XOR_DSZ32 | INSTR_DMR(dst, macro, src) )
#define XOR_DSZ32_DRR(dst, src0, src1) ( _XOR_DSZ32 | INSTR_DRR(dst, src0, src1) )
#define XOR_DSZ64_DRI(dst, src, imm) ( _XOR_DSZ64 | INSTR_DRI(dst, src, imm) )
#define XOR_DSZ64_DIR(dst, imm, src) ( _XOR_DSZ64 | INSTR_DIR(dst, imm, src) )
#define XOR_DSZ64_DRM(dst, src, macro) ( _XOR_DSZ64 | INSTR_DRM(dst, src, macro) )
#define XOR_DSZ64_DMR(dst, macro, src) ( _XOR_DSZ64 | INSTR_DMR(dst, macro, src) )
#define XOR_DSZ64_DRR(dst, src0, src1) ( _XOR_DSZ64 | INSTR_DRR(dst, src0, src1) )
/** @} */
/** \defgroup NOTAND
 *  @{
 */
#define NOTAND_DSZ8_DRI(dst, src, imm) ( _NOTAND_DSZ8 | INSTR_DRI(dst, src, imm) )
#define NOTAND_DSZ8_DIR(dst, imm, src) ( _NOTAND_DSZ8 | INSTR_DIR(dst, imm, src) )
#define NOTAND_DSZ8_DRM(dst, src, macro) ( _NOTAND_DSZ8 | INSTR_DRM(dst, src, macro) )
#define NOTAND_DSZ8_DMR(dst, macro, src) ( _NOTAND_DSZ8 | INSTR_DMR(dst, macro, src) )
#define NOTAND_DSZ8_DRR(dst, src0, src1) ( _NOTAND_DSZ8 | INSTR_DRR(dst, src0, src1) )
#define NOTAND_DSZ16_DRI(dst, src, imm) ( _NOTAND_DSZ16 | INSTR_DRI(dst, src, imm) )
#define NOTAND_DSZ16_DIR(dst, imm, src) ( _NOTAND_DSZ16 | INSTR_DIR(dst, imm, src) )
#define NOTAND_DSZ16_DRM(dst, src, macro) ( _NOTAND_DSZ16 | INSTR_DRM(dst, src, macro) )
#define NOTAND_DSZ16_DMR(dst, macro, src) ( _NOTAND_DSZ16 | INSTR_DMR(dst, macro, src) )
#define NOTAND_DSZ16_DRR(dst, src0, src1) ( _NOTAND_DSZ16 | INSTR_DRR(dst, src0, src1) )
#define NOTAND_DSZ32_DRI(dst, src, imm) ( _NOTAND_DSZ32 | INSTR_DRI(dst, src, imm) )
#define NOTAND_DSZ32_DIR(dst, imm, src) ( _NOTAND_DSZ32 | INSTR_DIR(dst, imm, src) )
#define NOTAND_DSZ32_DRM(dst, src, macro) ( _NOTAND_DSZ32 | INSTR_DRM(dst, src, macro) )
#define NOTAND_DSZ32_DMR(dst, macro, src) ( _NOTAND_DSZ32 | INSTR_DMR(dst, macro, src) )
#define NOTAND_DSZ32_DRR(dst, src0, src1) ( _NOTAND_DSZ32 | INSTR_DRR(dst, src0, src1) )
#define NOTAND_DSZ64_DRI(dst, src, imm) ( _NOTAND_DSZ64 | INSTR_DRI(dst, src, imm) )
#define NOTAND_DSZ64_DIR(dst, imm, src) ( _NOTAND_DSZ64 | INSTR_DIR(dst, imm, src) )
#define NOTAND_DSZ64_DRM(dst, src, macro) ( _NOTAND_DSZ64 | INSTR_DRM(dst, src, macro) )
#define NOTAND_DSZ64_DMR(dst, macro, src) ( _NOTAND_DSZ64 | INSTR_DMR(dst, macro, src) )
#define NOTAND_DSZ64_DRR(dst, src0, src1) ( _NOTAND_DSZ64 | INSTR_DRR(dst, src0, src1) )
/** @} */
/** \defgroup ROL
 *  @{
 */
#define ROL_DSZ8_DRI(dst, src, imm) ( _ROL_DSZ8 | INSTR_DRI(dst, src, imm) )
#define ROL_DSZ8_DIR(dst, imm, src) ( _ROL_DSZ8 | INSTR_DIR(dst, imm, src) )
#define ROL_DSZ8_DRM(dst, src, macro) ( _ROL_DSZ8 | INSTR_DRM(dst, src, macro) )
#define ROL_DSZ8_DMR(dst, macro, src) ( _ROL_DSZ8 | INSTR_DMR(dst, macro, src) )
#define ROL_DSZ8_DRR(dst, src0, src1) ( _ROL_DSZ8 | INSTR_DRR(dst, src0, src1) )
#define ROL_DSZ16_DRI(dst, src, imm) ( _ROL_DSZ16 | INSTR_DRI(dst, src, imm) )
#define ROL_DSZ16_DIR(dst, imm, src) ( _ROL_DSZ16 | INSTR_DIR(dst, imm, src) )
#define ROL_DSZ16_DRM(dst, src, macro) ( _ROL_DSZ16 | INSTR_DRM(dst, src, macro) )
#define ROL_DSZ16_DMR(dst, macro, src) ( _ROL_DSZ16 | INSTR_DMR(dst, macro, src) )
#define ROL_DSZ16_DRR(dst, src0, src1) ( _ROL_DSZ16 | INSTR_DRR(dst, src0, src1) )
#define ROL_DSZ32_DRI(dst, src, imm) ( _ROL_DSZ32 | INSTR_DRI(dst, src, imm) )
#define ROL_DSZ32_DIR(dst, imm, src) ( _ROL_DSZ32 | INSTR_DIR(dst, imm, src) )
#define ROL_DSZ32_DRM(dst, src, macro) ( _ROL_DSZ32 | INSTR_DRM(dst, src, macro) )
#define ROL_DSZ32_DMR(dst, macro, src) ( _ROL_DSZ32 | INSTR_DMR(dst, macro, src) )
#define ROL_DSZ32_DRR(dst, src0, src1) ( _ROL_DSZ32 | INSTR_DRR(dst, src0, src1) )
#define ROL_DSZ64_DRI(dst, src, imm) ( _ROL_DSZ64 | INSTR_DRI(dst, src, imm) )
#define ROL_DSZ64_DIR(dst, imm, src) ( _ROL_DSZ64 | INSTR_DIR(dst, imm, src) )
#define ROL_DSZ64_DRM(dst, src, macro) ( _ROL_DSZ64 | INSTR_DRM(dst, src, macro) )
#define ROL_DSZ64_DMR(dst, macro, src) ( _ROL_DSZ64 | INSTR_DMR(dst, macro, src) )
#define ROL_DSZ64_DRR(dst, src0, src1) ( _ROL_DSZ64 | INSTR_DRR(dst, src0, src1) )
/** @} */
/** \defgroup ROR
 *  @{
 */
#define ROR_DSZ8_DRI(dst, src, imm) ( _ROR_DSZ8 | INSTR_DRI(dst, src, imm) )
#define ROR_DSZ8_DIR(dst, imm, src) ( _ROR_DSZ8 | INSTR_DIR(dst, imm, src) )
#define ROR_DSZ8_DRM(dst, src, macro) ( _ROR_DSZ8 | INSTR_DRM(dst, src, macro) )
#define ROR_DSZ8_DMR(dst, macro, src) ( _ROR_DSZ8 | INSTR_DMR(dst, macro, src) )
#define ROR_DSZ8_DRR(dst, src0, src1) ( _ROR_DSZ8 | INSTR_DRR(dst, src0, src1) )
#define ROR_DSZ16_DRI(dst, src, imm) ( _ROR_DSZ16 | INSTR_DRI(dst, src, imm) )
#define ROR_DSZ16_DIR(dst, imm, src) ( _ROR_DSZ16 | INSTR_DIR(dst, imm, src) )
#define ROR_DSZ16_DRM(dst, src, macro) ( _ROR_DSZ16 | INSTR_DRM(dst, src, macro) )
#define ROR_DSZ16_DMR(dst, macro, src) ( _ROR_DSZ16 | INSTR_DMR(dst, macro, src) )
#define ROR_DSZ16_DRR(dst, src0, src1) ( _ROR_DSZ16 | INSTR_DRR(dst, src0, src1) )
#define ROR_DSZ32_DRI(dst, src, imm) ( _ROR_DSZ32 | INSTR_DRI(dst, src, imm) )
#define ROR_DSZ32_DIR(dst, imm, src) ( _ROR_DSZ32 | INSTR_DIR(dst, imm, src) )
#define ROR_DSZ32_DRM(dst, src, macro) ( _ROR_DSZ32 | INSTR_DRM(dst, src, macro) )
#define ROR_DSZ32_DMR(dst, macro, src) ( _ROR_DSZ32 | INSTR_DMR(dst, macro, src) )
#define ROR_DSZ32_DRR(dst, src0, src1) ( _ROR_DSZ32 | INSTR_DRR(dst, src0, src1) )
#define ROR_DSZ64_DRI(dst, src, imm) ( _ROR_DSZ64 | INSTR_DRI(dst, src, imm) )
#define ROR_DSZ64_DIR(dst, imm, src) ( _ROR_DSZ64 | INSTR_DIR(dst, imm, src) )
#define ROR_DSZ64_DRM(dst, src, macro) ( _ROR_DSZ64 | INSTR_DRM(dst, src, macro) )
#define ROR_DSZ64_DMR(dst, macro, src) ( _ROR_DSZ64 | INSTR_DMR(dst, macro, src) )
#define ROR_DSZ64_DRR(dst, src0, src1) ( _ROR_DSZ64 | INSTR_DRR(dst, src0, src1) )
/** @} */
/** \defgroup RAS
 *  @{
 */
#define RAS_DSZ8_DRI(dst, src, imm) ( _RAS_DSZ8 | INSTR_DRI(dst, src, imm) )
#define RAS_DSZ8_DIR(dst, imm, src) ( _RAS_DSZ8 | INSTR_DIR(dst, imm, src) )
#define RAS_DSZ8_DRM(dst, src, macro) ( _RAS_DSZ8 | INSTR_DRM(dst, src, macro) )
#define RAS_DSZ8_DMR(dst, macro, src) ( _RAS_DSZ8 | INSTR_DMR(dst, macro, src) )
#define RAS_DSZ8_DRR(dst, src0, src1) ( _RAS_DSZ8 | INSTR_DRR(dst, src0, src1) )
#define RAS_DSZ16_DRI(dst, src, imm) ( _RAS_DSZ16 | INSTR_DRI(dst, src, imm) )
#define RAS_DSZ16_DIR(dst, imm, src) ( _RAS_DSZ16 | INSTR_DIR(dst, imm, src) )
#define RAS_DSZ16_DRM(dst, src, macro) ( _RAS_DSZ16 | INSTR_DRM(dst, src, macro) )
#define RAS_DSZ16_DMR(dst, macro, src) ( _RAS_DSZ16 | INSTR_DMR(dst, macro, src) )
#define RAS_DSZ16_DRR(dst, src0, src1) ( _RAS_DSZ16 | INSTR_DRR(dst, src0, src1) )
#define RAS_DSZ32_DRI(dst, src, imm) ( _RAS_DSZ32 | INSTR_DRI(dst, src, imm) )
#define RAS_DSZ32_DIR(dst, imm, src) ( _RAS_DSZ32 | INSTR_DIR(dst, imm, src) )
#define RAS_DSZ32_DRM(dst, src, macro) ( _RAS_DSZ32 | INSTR_DRM(dst, src, macro) )
#define RAS_DSZ32_DMR(dst, macro, src) ( _RAS_DSZ32 | INSTR_DMR(dst, macro, src) )
#define RAS_DSZ32_DRR(dst, src0, src1) ( _RAS_DSZ32 | INSTR_DRR(dst, src0, src1) )
#define RAS_DSZ64_DRI(dst, src, imm) ( _RAS_DSZ64 | INSTR_DRI(dst, src, imm) )
#define RAS_DSZ64_DIR(dst, imm, src) ( _RAS_DSZ64 | INSTR_DIR(dst, imm, src) )
#define RAS_DSZ64_DRM(dst, src, macro) ( _RAS_DSZ64 | INSTR_DRM(dst, src, macro) )
#define RAS_DSZ64_DMR(dst, macro, src) ( _RAS_DSZ64 | INSTR_DMR(dst, macro, src) )
#define RAS_DSZ64_DRR(dst, src0, src1) ( _RAS_DSZ64 | INSTR_DRR(dst, src0, src1) )
/** @} */
/** \defgroup SHL
 *  @{
 */
#define SHL_DSZ8_DRI(dst, src, imm) ( _SHL_DSZ8 | INSTR_DRI(dst, src, imm) )
#define SHL_DSZ8_DIR(dst, imm, src) ( _SHL_DSZ8 | INSTR_DIR(dst, imm, src) )
#define SHL_DSZ8_DRM(dst, src, macro) ( _SHL_DSZ8 | INSTR_DRM(dst, src, macro) )
#define SHL_DSZ8_DMR(dst, macro, src) ( _SHL_DSZ8 | INSTR_DMR(dst, macro, src) )
#define SHL_DSZ8_DRR(dst, src0, src1) ( _SHL_DSZ8 | INSTR_DRR(dst, src0, src1) )
#define SHL_DSZ16_DRI(dst, src, imm) ( _SHL_DSZ16 | INSTR_DRI(dst, src, imm) )
#define SHL_DSZ16_DIR(dst, imm, src) ( _SHL_DSZ16 | INSTR_DIR(dst, imm, src) )
#define SHL_DSZ16_DRM(dst, src, macro) ( _SHL_DSZ16 | INSTR_DRM(dst, src, macro) )
#define SHL_DSZ16_DMR(dst, macro, src) ( _SHL_DSZ16 | INSTR_DMR(dst, macro, src) )
#define SHL_DSZ16_DRR(dst, src0, src1) ( _SHL_DSZ16 | INSTR_DRR(dst, src0, src1) )
#define SHL_DSZ32_DRI(dst, src, imm) ( _SHL_DSZ32 | INSTR_DRI(dst, src, imm) )
#define SHL_DSZ32_DIR(dst, imm, src) ( _SHL_DSZ32 | INSTR_DIR(dst, imm, src) )
#define SHL_DSZ32_DRM(dst, src, macro) ( _SHL_DSZ32 | INSTR_DRM(dst, src, macro) )
#define SHL_DSZ32_DMR(dst, macro, src) ( _SHL_DSZ32 | INSTR_DMR(dst, macro, src) )
#define SHL_DSZ32_DRR(dst, src0, src1) ( _SHL_DSZ32 | INSTR_DRR(dst, src0, src1) )
#define SHL_DSZ64_DRI(dst, src, imm) ( _SHL_DSZ64 | INSTR_DRI(dst, src, imm) )
#define SHL_DSZ64_DIR(dst, imm, src) ( _SHL_DSZ64 | INSTR_DIR(dst, imm, src) )
#define SHL_DSZ64_DRM(dst, src, macro) ( _SHL_DSZ64 | INSTR_DRM(dst, src, macro) )
#define SHL_DSZ64_DMR(dst, macro, src) ( _SHL_DSZ64 | INSTR_DMR(dst, macro, src) )
#define SHL_DSZ64_DRR(dst, src0, src1) ( _SHL_DSZ64 | INSTR_DRR(dst, src0, src1) )
/** @} */
/** \defgroup SHR
 *  @{
 */
#define SHR_DSZ8_DRI(dst, src, imm) ( _SHR_DSZ8 | INSTR_DRI(dst, src, imm) )
#define SHR_DSZ8_DIR(dst, imm, src) ( _SHR_DSZ8 | INSTR_DIR(dst, imm, src) )
#define SHR_DSZ8_DRM(dst, src, macro) ( _SHR_DSZ8 | INSTR_DRM(dst, src, macro) )
#define SHR_DSZ8_DMR(dst, macro, src) ( _SHR_DSZ8 | INSTR_DMR(dst, macro, src) )
#define SHR_DSZ8_DRR(dst, src0, src1) ( _SHR_DSZ8 | INSTR_DRR(dst, src0, src1) )
#define SHR_DSZ16_DRI(dst, src, imm) ( _SHR_DSZ16 | INSTR_DRI(dst, src, imm) )
#define SHR_DSZ16_DIR(dst, imm, src) ( _SHR_DSZ16 | INSTR_DIR(dst, imm, src) )
#define SHR_DSZ16_DRM(dst, src, macro) ( _SHR_DSZ16 | INSTR_DRM(dst, src, macro) )
#define SHR_DSZ16_DMR(dst, macro, src) ( _SHR_DSZ16 | INSTR_DMR(dst, macro, src) )
#define SHR_DSZ16_DRR(dst, src0, src1) ( _SHR_DSZ16 | INSTR_DRR(dst, src0, src1) )
#define SHR_DSZ32_DRI(dst, src, imm) ( _SHR_DSZ32 | INSTR_DRI(dst, src, imm) )
#define SHR_DSZ32_DIR(dst, imm, src) ( _SHR_DSZ32 | INSTR_DIR(dst, imm, src) )
#define SHR_DSZ32_DRM(dst, src, macro) ( _SHR_DSZ32 | INSTR_DRM(dst, src, macro) )
#define SHR_DSZ32_DMR(dst, macro, src) ( _SHR_DSZ32 | INSTR_DMR(dst, macro, src) )
#define SHR_DSZ32_DRR(dst, src0, src1) ( _SHR_DSZ32 | INSTR_DRR(dst, src0, src1) )
#define SHR_DSZ64_DRI(dst, src, imm) ( _SHR_DSZ64 | INSTR_DRI(dst, src, imm) )
#define SHR_DSZ64_DIR(dst, imm, src) ( _SHR_DSZ64 | INSTR_DIR(dst, imm, src) )
#define SHR_DSZ64_DRM(dst, src, macro) ( _SHR_DSZ64 | INSTR_DRM(dst, src, macro) )
#define SHR_DSZ64_DMR(dst, macro, src) ( _SHR_DSZ64 | INSTR_DMR(dst, macro, src) )
#define SHR_DSZ64_DRR(dst, src0, src1) ( _SHR_DSZ64 | INSTR_DRR(dst, src0, src1) )
/** @} */
/** \defgroup CONCAT
 *  @{
 */
#define CONCAT_DSZ8_DRI(dst, src, imm) ( _CONCAT_DSZ8 | INSTR_DRI(dst, src, imm) )
#define CONCAT_DSZ8_DIR(dst, imm, src) ( _CONCAT_DSZ8 | INSTR_DIR(dst, imm, src) )
#define CONCAT_DSZ8_DRM(dst, src, macro) ( _CONCAT_DSZ8 | INSTR_DRM(dst, src, macro) )
#define CONCAT_DSZ8_DMR(dst, macro, src) ( _CONCAT_DSZ8 | INSTR_DMR(dst, macro, src) )
#define CONCAT_DSZ8_DRR(dst, src0, src1) ( _CONCAT_DSZ8 | INSTR_DRR(dst, src0, src1) )
#define CONCAT_DSZ16_DRI(dst, src, imm) ( _CONCAT_DSZ16 | INSTR_DRI(dst, src, imm) )
#define CONCAT_DSZ16_DIR(dst, imm, src) ( _CONCAT_DSZ16 | INSTR_DIR(dst, imm, src) )
#define CONCAT_DSZ16_DRM(dst, src, macro) ( _CONCAT_DSZ16 | INSTR_DRM(dst, src, macro) )
#define CONCAT_DSZ16_DMR(dst, macro, src) ( _CONCAT_DSZ16 | INSTR_DMR(dst, macro, src) )
#define CONCAT_DSZ16_DRR(dst, src0, src1) ( _CONCAT_DSZ16 | INSTR_DRR(dst, src0, src1) )
#define CONCAT_DSZ32_DRI(dst, src, imm) ( _CONCAT_DSZ32 | INSTR_DRI(dst, src, imm) )
#define CONCAT_DSZ32_DIR(dst, imm, src) ( _CONCAT_DSZ32 | INSTR_DIR(dst, imm, src) )
#define CONCAT_DSZ32_DRM(dst, src, macro) ( _CONCAT_DSZ32 | INSTR_DRM(dst, src, macro) )
#define CONCAT_DSZ32_DMR(dst, macro, src) ( _CONCAT_DSZ32 | INSTR_DMR(dst, macro, src) )
#define CONCAT_DSZ32_DRR(dst, src0, src1) ( _CONCAT_DSZ32 | INSTR_DRR(dst, src0, src1) )
#define CONCAT_DSZ64_DRI(dst, src, imm) ( _CONCAT_DSZ64 | INSTR_DRI(dst, src, imm) )
#define CONCAT_DSZ64_DIR(dst, imm, src) ( _CONCAT_DSZ64 | INSTR_DIR(dst, imm, src) )
#define CONCAT_DSZ64_DRM(dst, src, macro) ( _CONCAT_DSZ64 | INSTR_DRM(dst, src, macro) )
#define CONCAT_DSZ64_DMR(dst, macro, src) ( _CONCAT_DSZ64 | INSTR_DMR(dst, macro, src) )
#define CONCAT_DSZ64_DRR(dst, src0, src1) ( _CONCAT_DSZ64 | INSTR_DRR(dst, src0, src1) )
/** @} */
/** \defgroup MOVEINSERTFLGS
 *  @{
 */
#define MOVEINSERTFLGS_DSZ8_DRI(dst, src, imm) ( _MOVEINSERTFLGS_DSZ8 | INSTR_DRI(dst, src, imm) )
#define MOVEINSERTFLGS_DSZ8_DIR(dst, imm, src) ( _MOVEINSERTFLGS_DSZ8 | INSTR_DIR(dst, imm, src) )
#define MOVEINSERTFLGS_DSZ8_DRM(dst, src, macro) ( _MOVEINSERTFLGS_DSZ8 | INSTR_DRM(dst, src, macro) )
#define MOVEINSERTFLGS_DSZ8_DMR(dst, macro, src) ( _MOVEINSERTFLGS_DSZ8 | INSTR_DMR(dst, macro, src) )
#define MOVEINSERTFLGS_DSZ8_DRR(dst, src0, src1) ( _MOVEINSERTFLGS_DSZ8 | INSTR_DRR(dst, src0, src1) )
#define MOVEINSERTFLGS_DSZ16_DRI(dst, src, imm) ( _MOVEINSERTFLGS_DSZ16 | INSTR_DRI(dst, src, imm) )
#define MOVEINSERTFLGS_DSZ16_DIR(dst, imm, src) ( _MOVEINSERTFLGS_DSZ16 | INSTR_DIR(dst, imm, src) )
#define MOVEINSERTFLGS_DSZ16_DRM(dst, src, macro) ( _MOVEINSERTFLGS_DSZ16 | INSTR_DRM(dst, src, macro) )
#define MOVEINSERTFLGS_DSZ16_DMR(dst, macro, src) ( _MOVEINSERTFLGS_DSZ16 | INSTR_DMR(dst, macro, src) )
#define MOVEINSERTFLGS_DSZ16_DRR(dst, src0, src1) ( _MOVEINSERTFLGS_DSZ16 | INSTR_DRR(dst, src0, src1) )
#define MOVEINSERTFLGS_DSZ32_DRI(dst, src, imm) ( _MOVEINSERTFLGS_DSZ32 | INSTR_DRI(dst, src, imm) )
#define MOVEINSERTFLGS_DSZ32_DIR(dst, imm, src) ( _MOVEINSERTFLGS_DSZ32 | INSTR_DIR(dst, imm, src) )
#define MOVEINSERTFLGS_DSZ32_DRM(dst, src, macro) ( _MOVEINSERTFLGS_DSZ32 | INSTR_DRM(dst, src, macro) )
#define MOVEINSERTFLGS_DSZ32_DMR(dst, macro, src) ( _MOVEINSERTFLGS_DSZ32 | INSTR_DMR(dst, macro, src) )
#define MOVEINSERTFLGS_DSZ32_DRR(dst, src0, src1) ( _MOVEINSERTFLGS_DSZ32 | INSTR_DRR(dst, src0, src1) )
#define MOVEINSERTFLGS_DSZ64_DRI(dst, src, imm) ( _MOVEINSERTFLGS_DSZ64 | INSTR_DRI(dst, src, imm) )
#define MOVEINSERTFLGS_DSZ64_DIR(dst, imm, src) ( _MOVEINSERTFLGS_DSZ64 | INSTR_DIR(dst, imm, src) )
#define MOVEINSERTFLGS_DSZ64_DRM(dst, src, macro) ( _MOVEINSERTFLGS_DSZ64 | INSTR_DRM(dst, src, macro) )
#define MOVEINSERTFLGS_DSZ64_DMR(dst, macro, src) ( _MOVEINSERTFLGS_DSZ64 | INSTR_DMR(dst, macro, src) )
#define MOVEINSERTFLGS_DSZ64_DRR(dst, src0, src1) ( _MOVEINSERTFLGS_DSZ64 | INSTR_DRR(dst, src0, src1) )
/** @} */
/** \defgroup MOVEMERGEFLGS
 *  @{
 */
#define MOVEMERGEFLGS_DSZ8_DRI(dst, src, imm) ( _MOVEMERGEFLGS_DSZ8 | INSTR_DRI(dst, src, imm) )
#define MOVEMERGEFLGS_DSZ8_DIR(dst, imm, src) ( _MOVEMERGEFLGS_DSZ8 | INSTR_DIR(dst, imm, src) )
#define MOVEMERGEFLGS_DSZ8_DRM(dst, src, macro) ( _MOVEMERGEFLGS_DSZ8 | INSTR_DRM(dst, src, macro) )
#define MOVEMERGEFLGS_DSZ8_DMR(dst, macro, src) ( _MOVEMERGEFLGS_DSZ8 | INSTR_DMR(dst, macro, src) )
#define MOVEMERGEFLGS_DSZ8_DRR(dst, src0, src1) ( _MOVEMERGEFLGS_DSZ8 | INSTR_DRR(dst, src0, src1) )
#define MOVEMERGEFLGS_DSZ16_DRI(dst, src, imm) ( _MOVEMERGEFLGS_DSZ16 | INSTR_DRI(dst, src, imm) )
#define MOVEMERGEFLGS_DSZ16_DIR(dst, imm, src) ( _MOVEMERGEFLGS_DSZ16 | INSTR_DIR(dst, imm, src) )
#define MOVEMERGEFLGS_DSZ16_DRM(dst, src, macro) ( _MOVEMERGEFLGS_DSZ16 | INSTR_DRM(dst, src, macro) )
#define MOVEMERGEFLGS_DSZ16_DMR(dst, macro, src) ( _MOVEMERGEFLGS_DSZ16 | INSTR_DMR(dst, macro, src) )
#define MOVEMERGEFLGS_DSZ16_DRR(dst, src0, src1) ( _MOVEMERGEFLGS_DSZ16 | INSTR_DRR(dst, src0, src1) )
#define MOVEMERGEFLGS_DSZ32_DRI(dst, src, imm) ( _MOVEMERGEFLGS_DSZ32 | INSTR_DRI(dst, src, imm) )
#define MOVEMERGEFLGS_DSZ32_DIR(dst, imm, src) ( _MOVEMERGEFLGS_DSZ32 | INSTR_DIR(dst, imm, src) )
#define MOVEMERGEFLGS_DSZ32_DRM(dst, src, macro) ( _MOVEMERGEFLGS_DSZ32 | INSTR_DRM(dst, src, macro) )
#define MOVEMERGEFLGS_DSZ32_DMR(dst, macro, src) ( _MOVEMERGEFLGS_DSZ32 | INSTR_DMR(dst, macro, src) )
#define MOVEMERGEFLGS_DSZ32_DRR(dst, src0, src1) ( _MOVEMERGEFLGS_DSZ32 | INSTR_DRR(dst, src0, src1) )
#define MOVEMERGEFLGS_DSZ64_DRI(dst, src, imm) ( _MOVEMERGEFLGS_DSZ64 | INSTR_DRI(dst, src, imm) )
#define MOVEMERGEFLGS_DSZ64_DIR(dst, imm, src) ( _MOVEMERGEFLGS_DSZ64 | INSTR_DIR(dst, imm, src) )
#define MOVEMERGEFLGS_DSZ64_DRM(dst, src, macro) ( _MOVEMERGEFLGS_DSZ64 | INSTR_DRM(dst, src, macro) )
#define MOVEMERGEFLGS_DSZ64_DMR(dst, macro, src) ( _MOVEMERGEFLGS_DSZ64 | INSTR_DMR(dst, macro, src) )
#define MOVEMERGEFLGS_DSZ64_DRR(dst, src0, src1) ( _MOVEMERGEFLGS_DSZ64 | INSTR_DRR(dst, src0, src1) )
/** @} */
/** \defgroup UJMPCC_DIRECT_NOTTAKEN
 *  @{
 */
#define UJMPCC_DIRECT_NOTTAKEN_CONDO_RI(src, imm) ( _UJMPCC_DIRECT_NOTTAKEN_CONDO | INSTR_RI(src, imm) )
#define UJMPCC_DIRECT_NOTTAKEN_CONDO_RR(src0, src1) ( _UJMPCC_DIRECT_NOTTAKEN_CONDO | INSTR_RR(src0, src1) )
#define UJMPCC_DIRECT_NOTTAKEN_CONDNO_RI(src, imm) ( _UJMPCC_DIRECT_NOTTAKEN_CONDNO | INSTR_RI(src, imm) )
#define UJMPCC_DIRECT_NOTTAKEN_CONDNO_RR(src0, src1) ( _UJMPCC_DIRECT_NOTTAKEN_CONDNO | INSTR_RR(src0, src1) )
#define UJMPCC_DIRECT_NOTTAKEN_CONDB_RI(src, imm) ( _UJMPCC_DIRECT_NOTTAKEN_CONDB | INSTR_RI(src, imm) )
#define UJMPCC_DIRECT_NOTTAKEN_CONDB_RR(src0, src1) ( _UJMPCC_DIRECT_NOTTAKEN_CONDB | INSTR_RR(src0, src1) )
#define UJMPCC_DIRECT_NOTTAKEN_CONDNB_RI(src, imm) ( _UJMPCC_DIRECT_NOTTAKEN_CONDNB | INSTR_RI(src, imm) )
#define UJMPCC_DIRECT_NOTTAKEN_CONDNB_RR(src0, src1) ( _UJMPCC_DIRECT_NOTTAKEN_CONDNB | INSTR_RR(src0, src1) )
#define UJMPCC_DIRECT_NOTTAKEN_CONDZ_RI(src, imm) ( _UJMPCC_DIRECT_NOTTAKEN_CONDZ | INSTR_RI(src, imm) )
#define UJMPCC_DIRECT_NOTTAKEN_CONDZ_RR(src0, src1) ( _UJMPCC_DIRECT_NOTTAKEN_CONDZ | INSTR_RR(src0, src1) )
#define UJMPCC_DIRECT_NOTTAKEN_CONDNZ_RI(src, imm) ( _UJMPCC_DIRECT_NOTTAKEN_CONDNZ | INSTR_RI(src, imm) )
#define UJMPCC_DIRECT_NOTTAKEN_CONDNZ_RR(src0, src1) ( _UJMPCC_DIRECT_NOTTAKEN_CONDNZ | INSTR_RR(src0, src1) )
#define UJMPCC_DIRECT_NOTTAKEN_CONDBE_RI(src, imm) ( _UJMPCC_DIRECT_NOTTAKEN_CONDBE | INSTR_RI(src, imm) )
#define UJMPCC_DIRECT_NOTTAKEN_CONDBE_RR(src0, src1) ( _UJMPCC_DIRECT_NOTTAKEN_CONDBE | INSTR_RR(src0, src1) )
#define UJMPCC_DIRECT_NOTTAKEN_CONDNBE_RI(src, imm) ( _UJMPCC_DIRECT_NOTTAKEN_CONDNBE | INSTR_RI(src, imm) )
#define UJMPCC_DIRECT_NOTTAKEN_CONDNBE_RR(src0, src1) ( _UJMPCC_DIRECT_NOTTAKEN_CONDNBE | INSTR_RR(src0, src1) )
#define UJMPCC_DIRECT_NOTTAKEN_CONDS_RI(src, imm) ( _UJMPCC_DIRECT_NOTTAKEN_CONDS | INSTR_RI(src, imm) )
#define UJMPCC_DIRECT_NOTTAKEN_CONDS_RR(src0, src1) ( _UJMPCC_DIRECT_NOTTAKEN_CONDS | INSTR_RR(src0, src1) )
#define UJMPCC_DIRECT_NOTTAKEN_CONDNS_RI(src, imm) ( _UJMPCC_DIRECT_NOTTAKEN_CONDNS | INSTR_RI(src, imm) )
#define UJMPCC_DIRECT_NOTTAKEN_CONDNS_RR(src0, src1) ( _UJMPCC_DIRECT_NOTTAKEN_CONDNS | INSTR_RR(src0, src1) )
#define UJMPCC_DIRECT_NOTTAKEN_CONDP_RI(src, imm) ( _UJMPCC_DIRECT_NOTTAKEN_CONDP | INSTR_RI(src, imm) )
#define UJMPCC_DIRECT_NOTTAKEN_CONDP_RR(src0, src1) ( _UJMPCC_DIRECT_NOTTAKEN_CONDP | INSTR_RR(src0, src1) )
#define UJMPCC_DIRECT_NOTTAKEN_CONDNP_RI(src, imm) ( _UJMPCC_DIRECT_NOTTAKEN_CONDNP | INSTR_RI(src, imm) )
#define UJMPCC_DIRECT_NOTTAKEN_CONDNP_RR(src0, src1) ( _UJMPCC_DIRECT_NOTTAKEN_CONDNP | INSTR_RR(src0, src1) )
#define UJMPCC_DIRECT_NOTTAKEN_CONDL_RI(src, imm) ( _UJMPCC_DIRECT_NOTTAKEN_CONDL | INSTR_RI(src, imm) )
#define UJMPCC_DIRECT_NOTTAKEN_CONDL_RR(src0, src1) ( _UJMPCC_DIRECT_NOTTAKEN_CONDL | INSTR_RR(src0, src1) )
#define UJMPCC_DIRECT_NOTTAKEN_CONDNL_RI(src, imm) ( _UJMPCC_DIRECT_NOTTAKEN_CONDNL | INSTR_RI(src, imm) )
#define UJMPCC_DIRECT_NOTTAKEN_CONDNL_RR(src0, src1) ( _UJMPCC_DIRECT_NOTTAKEN_CONDNL | INSTR_RR(src0, src1) )
#define UJMPCC_DIRECT_NOTTAKEN_CONDLE_RI(src, imm) ( _UJMPCC_DIRECT_NOTTAKEN_CONDLE | INSTR_RI(src, imm) )
#define UJMPCC_DIRECT_NOTTAKEN_CONDLE_RR(src0, src1) ( _UJMPCC_DIRECT_NOTTAKEN_CONDLE | INSTR_RR(src0, src1) )
#define UJMPCC_DIRECT_NOTTAKEN_CONDNLE_RI(src, imm) ( _UJMPCC_DIRECT_NOTTAKEN_CONDNLE | INSTR_RI(src, imm) )
#define UJMPCC_DIRECT_NOTTAKEN_CONDNLE_RR(src0, src1) ( _UJMPCC_DIRECT_NOTTAKEN_CONDNLE | INSTR_RR(src0, src1) )
/** @} */
/** \defgroup MJMPCC_DSZNOP
 *  @{
 */
#define MJMPCC_DSZNOP_CONDO_RI(src, imm) ( _MJMPCC_DSZNOP_CONDO | INSTR_RI(src, imm) )
#define MJMPCC_DSZNOP_CONDO_RR(src0, src1) ( _MJMPCC_DSZNOP_CONDO | INSTR_RR(src0, src1) )
#define MJMPCC_DSZNOP_CONDNO_RI(src, imm) ( _MJMPCC_DSZNOP_CONDNO | INSTR_RI(src, imm) )
#define MJMPCC_DSZNOP_CONDNO_RR(src0, src1) ( _MJMPCC_DSZNOP_CONDNO | INSTR_RR(src0, src1) )
#define MJMPCC_DSZNOP_CONDB_RI(src, imm) ( _MJMPCC_DSZNOP_CONDB | INSTR_RI(src, imm) )
#define MJMPCC_DSZNOP_CONDB_RR(src0, src1) ( _MJMPCC_DSZNOP_CONDB | INSTR_RR(src0, src1) )
#define MJMPCC_DSZNOP_CONDNB_RI(src, imm) ( _MJMPCC_DSZNOP_CONDNB | INSTR_RI(src, imm) )
#define MJMPCC_DSZNOP_CONDNB_RR(src0, src1) ( _MJMPCC_DSZNOP_CONDNB | INSTR_RR(src0, src1) )
#define MJMPCC_DSZNOP_CONDZ_RI(src, imm) ( _MJMPCC_DSZNOP_CONDZ | INSTR_RI(src, imm) )
#define MJMPCC_DSZNOP_CONDZ_RR(src0, src1) ( _MJMPCC_DSZNOP_CONDZ | INSTR_RR(src0, src1) )
#define MJMPCC_DSZNOP_CONDNZ_RI(src, imm) ( _MJMPCC_DSZNOP_CONDNZ | INSTR_RI(src, imm) )
#define MJMPCC_DSZNOP_CONDNZ_RR(src0, src1) ( _MJMPCC_DSZNOP_CONDNZ | INSTR_RR(src0, src1) )
#define MJMPCC_DSZNOP_CONDBE_RI(src, imm) ( _MJMPCC_DSZNOP_CONDBE | INSTR_RI(src, imm) )
#define MJMPCC_DSZNOP_CONDBE_RR(src0, src1) ( _MJMPCC_DSZNOP_CONDBE | INSTR_RR(src0, src1) )
#define MJMPCC_DSZNOP_CONDNBE_RI(src, imm) ( _MJMPCC_DSZNOP_CONDNBE | INSTR_RI(src, imm) )
#define MJMPCC_DSZNOP_CONDNBE_RR(src0, src1) ( _MJMPCC_DSZNOP_CONDNBE | INSTR_RR(src0, src1) )
#define MJMPCC_DSZNOP_CONDS_RI(src, imm) ( _MJMPCC_DSZNOP_CONDS | INSTR_RI(src, imm) )
#define MJMPCC_DSZNOP_CONDS_RR(src0, src1) ( _MJMPCC_DSZNOP_CONDS | INSTR_RR(src0, src1) )
#define MJMPCC_DSZNOP_CONDNS_RI(src, imm) ( _MJMPCC_DSZNOP_CONDNS | INSTR_RI(src, imm) )
#define MJMPCC_DSZNOP_CONDNS_RR(src0, src1) ( _MJMPCC_DSZNOP_CONDNS | INSTR_RR(src0, src1) )
#define MJMPCC_DSZNOP_CONDP_RI(src, imm) ( _MJMPCC_DSZNOP_CONDP | INSTR_RI(src, imm) )
#define MJMPCC_DSZNOP_CONDP_RR(src0, src1) ( _MJMPCC_DSZNOP_CONDP | INSTR_RR(src0, src1) )
#define MJMPCC_DSZNOP_CONDNP_RI(src, imm) ( _MJMPCC_DSZNOP_CONDNP | INSTR_RI(src, imm) )
#define MJMPCC_DSZNOP_CONDNP_RR(src0, src1) ( _MJMPCC_DSZNOP_CONDNP | INSTR_RR(src0, src1) )
#define MJMPCC_DSZNOP_CONDL_RI(src, imm) ( _MJMPCC_DSZNOP_CONDL | INSTR_RI(src, imm) )
#define MJMPCC_DSZNOP_CONDL_RR(src0, src1) ( _MJMPCC_DSZNOP_CONDL | INSTR_RR(src0, src1) )
#define MJMPCC_DSZNOP_CONDNL_RI(src, imm) ( _MJMPCC_DSZNOP_CONDNL | INSTR_RI(src, imm) )
#define MJMPCC_DSZNOP_CONDNL_RR(src0, src1) ( _MJMPCC_DSZNOP_CONDNL | INSTR_RR(src0, src1) )
#define MJMPCC_DSZNOP_CONDLE_RI(src, imm) ( _MJMPCC_DSZNOP_CONDLE | INSTR_RI(src, imm) )
#define MJMPCC_DSZNOP_CONDLE_RR(src0, src1) ( _MJMPCC_DSZNOP_CONDLE | INSTR_RR(src0, src1) )
#define MJMPCC_DSZNOP_CONDNLE_RI(src, imm) ( _MJMPCC_DSZNOP_CONDNLE | INSTR_RI(src, imm) )
#define MJMPCC_DSZNOP_CONDNLE_RR(src0, src1) ( _MJMPCC_DSZNOP_CONDNLE | INSTR_RR(src0, src1) )
/** @} */
/** \defgroup SETCC
 *  @{
 */
#define SETCC_CONDO_DR(dst, src) ( _SETCC_CONDO | INSTR_DR0(dst, src) )
#define SETCC_CONDNO_DR(dst, src) ( _SETCC_CONDNO | INSTR_DR0(dst, src) )
#define SETCC_CONDB_DR(dst, src) ( _SETCC_CONDB | INSTR_DR0(dst, src) )
#define SETCC_CONDNB_DR(dst, src) ( _SETCC_CONDNB | INSTR_DR0(dst, src) )
#define SETCC_CONDZ_DR(dst, src) ( _SETCC_CONDZ | INSTR_DR0(dst, src) )
#define SETCC_CONDNZ_DR(dst, src) ( _SETCC_CONDNZ | INSTR_DR0(dst, src) )
#define SETCC_CONDBE_DR(dst, src) ( _SETCC_CONDBE | INSTR_DR0(dst, src) )
#define SETCC_CONDNBE_DR(dst, src) ( _SETCC_CONDNBE | INSTR_DR0(dst, src) )
#define SETCC_CONDS_DR(dst, src) ( _SETCC_CONDS | INSTR_DR0(dst, src) )
#define SETCC_CONDNS_DR(dst, src) ( _SETCC_CONDNS | INSTR_DR0(dst, src) )
#define SETCC_CONDP_DR(dst, src) ( _SETCC_CONDP | INSTR_DR0(dst, src) )
#define SETCC_CONDNP_DR(dst, src) ( _SETCC_CONDNP | INSTR_DR0(dst, src) )
#define SETCC_CONDL_DR(dst, src) ( _SETCC_CONDL | INSTR_DR0(dst, src) )
#define SETCC_CONDNL_DR(dst, src) ( _SETCC_CONDNL | INSTR_DR0(dst, src) )
#define SETCC_CONDLE_DR(dst, src) ( _SETCC_CONDLE | INSTR_DR0(dst, src) )
#define SETCC_CONDNLE_DR(dst, src) ( _SETCC_CONDNLE | INSTR_DR0(dst, src) )
/** @} */
/** \defgroup CMOVCC
 *  @{
 */
#define CMOVCC_DSZ8_CONDO_DRI(dst, src, imm) ( _CMOVCC_DSZ8_CONDO | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ8_CONDO_DRR(dst, src0, src1) ( _CMOVCC_DSZ8_CONDO | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ8_CONDNO_DRI(dst, src, imm) ( _CMOVCC_DSZ8_CONDNO | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ8_CONDNO_DRR(dst, src0, src1) ( _CMOVCC_DSZ8_CONDNO | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ8_CONDB_DRI(dst, src, imm) ( _CMOVCC_DSZ8_CONDB | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ8_CONDB_DRR(dst, src0, src1) ( _CMOVCC_DSZ8_CONDB | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ8_CONDNB_DRI(dst, src, imm) ( _CMOVCC_DSZ8_CONDNB | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ8_CONDNB_DRR(dst, src0, src1) ( _CMOVCC_DSZ8_CONDNB | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ8_CONDZ_DRI(dst, src, imm) ( _CMOVCC_DSZ8_CONDZ | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ8_CONDZ_DRR(dst, src0, src1) ( _CMOVCC_DSZ8_CONDZ | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ8_CONDNZ_DRI(dst, src, imm) ( _CMOVCC_DSZ8_CONDNZ | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ8_CONDNZ_DRR(dst, src0, src1) ( _CMOVCC_DSZ8_CONDNZ | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ8_CONDBE_DRI(dst, src, imm) ( _CMOVCC_DSZ8_CONDBE | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ8_CONDBE_DRR(dst, src0, src1) ( _CMOVCC_DSZ8_CONDBE | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ8_CONDNBE_DRI(dst, src, imm) ( _CMOVCC_DSZ8_CONDNBE | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ8_CONDNBE_DRR(dst, src0, src1) ( _CMOVCC_DSZ8_CONDNBE | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ8_CONDS_DRI(dst, src, imm) ( _CMOVCC_DSZ8_CONDS | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ8_CONDS_DRR(dst, src0, src1) ( _CMOVCC_DSZ8_CONDS | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ8_CONDNS_DRI(dst, src, imm) ( _CMOVCC_DSZ8_CONDNS | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ8_CONDNS_DRR(dst, src0, src1) ( _CMOVCC_DSZ8_CONDNS | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ8_CONDP_DRI(dst, src, imm) ( _CMOVCC_DSZ8_CONDP | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ8_CONDP_DRR(dst, src0, src1) ( _CMOVCC_DSZ8_CONDP | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ8_CONDNP_DRI(dst, src, imm) ( _CMOVCC_DSZ8_CONDNP | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ8_CONDNP_DRR(dst, src0, src1) ( _CMOVCC_DSZ8_CONDNP | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ8_CONDL_DRI(dst, src, imm) ( _CMOVCC_DSZ8_CONDL | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ8_CONDL_DRR(dst, src0, src1) ( _CMOVCC_DSZ8_CONDL | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ8_CONDNL_DRI(dst, src, imm) ( _CMOVCC_DSZ8_CONDNL | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ8_CONDNL_DRR(dst, src0, src1) ( _CMOVCC_DSZ8_CONDNL | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ8_CONDLE_DRI(dst, src, imm) ( _CMOVCC_DSZ8_CONDLE | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ8_CONDLE_DRR(dst, src0, src1) ( _CMOVCC_DSZ8_CONDLE | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ8_CONDNLE_DRI(dst, src, imm) ( _CMOVCC_DSZ8_CONDNLE | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ8_CONDNLE_DRR(dst, src0, src1) ( _CMOVCC_DSZ8_CONDNLE | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ16_CONDO_DRI(dst, src, imm) ( _CMOVCC_DSZ16_CONDO | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ16_CONDO_DRR(dst, src0, src1) ( _CMOVCC_DSZ16_CONDO | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ16_CONDNO_DRI(dst, src, imm) ( _CMOVCC_DSZ16_CONDNO | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ16_CONDNO_DRR(dst, src0, src1) ( _CMOVCC_DSZ16_CONDNO | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ16_CONDB_DRI(dst, src, imm) ( _CMOVCC_DSZ16_CONDB | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ16_CONDB_DRR(dst, src0, src1) ( _CMOVCC_DSZ16_CONDB | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ16_CONDNB_DRI(dst, src, imm) ( _CMOVCC_DSZ16_CONDNB | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ16_CONDNB_DRR(dst, src0, src1) ( _CMOVCC_DSZ16_CONDNB | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ16_CONDZ_DRI(dst, src, imm) ( _CMOVCC_DSZ16_CONDZ | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ16_CONDZ_DRR(dst, src0, src1) ( _CMOVCC_DSZ16_CONDZ | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ16_CONDNZ_DRI(dst, src, imm) ( _CMOVCC_DSZ16_CONDNZ | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ16_CONDNZ_DRR(dst, src0, src1) ( _CMOVCC_DSZ16_CONDNZ | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ16_CONDBE_DRI(dst, src, imm) ( _CMOVCC_DSZ16_CONDBE | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ16_CONDBE_DRR(dst, src0, src1) ( _CMOVCC_DSZ16_CONDBE | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ16_CONDNBE_DRI(dst, src, imm) ( _CMOVCC_DSZ16_CONDNBE | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ16_CONDNBE_DRR(dst, src0, src1) ( _CMOVCC_DSZ16_CONDNBE | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ16_CONDS_DRI(dst, src, imm) ( _CMOVCC_DSZ16_CONDS | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ16_CONDS_DRR(dst, src0, src1) ( _CMOVCC_DSZ16_CONDS | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ16_CONDNS_DRI(dst, src, imm) ( _CMOVCC_DSZ16_CONDNS | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ16_CONDNS_DRR(dst, src0, src1) ( _CMOVCC_DSZ16_CONDNS | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ16_CONDP_DRI(dst, src, imm) ( _CMOVCC_DSZ16_CONDP | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ16_CONDP_DRR(dst, src0, src1) ( _CMOVCC_DSZ16_CONDP | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ16_CONDNP_DRI(dst, src, imm) ( _CMOVCC_DSZ16_CONDNP | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ16_CONDNP_DRR(dst, src0, src1) ( _CMOVCC_DSZ16_CONDNP | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ16_CONDL_DRI(dst, src, imm) ( _CMOVCC_DSZ16_CONDL | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ16_CONDL_DRR(dst, src0, src1) ( _CMOVCC_DSZ16_CONDL | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ16_CONDNL_DRI(dst, src, imm) ( _CMOVCC_DSZ16_CONDNL | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ16_CONDNL_DRR(dst, src0, src1) ( _CMOVCC_DSZ16_CONDNL | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ16_CONDLE_DRI(dst, src, imm) ( _CMOVCC_DSZ16_CONDLE | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ16_CONDLE_DRR(dst, src0, src1) ( _CMOVCC_DSZ16_CONDLE | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ16_CONDNLE_DRI(dst, src, imm) ( _CMOVCC_DSZ16_CONDNLE | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ16_CONDNLE_DRR(dst, src0, src1) ( _CMOVCC_DSZ16_CONDNLE | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ32_CONDO_DRI(dst, src, imm) ( _CMOVCC_DSZ32_CONDO | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ32_CONDO_DRR(dst, src0, src1) ( _CMOVCC_DSZ32_CONDO | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ32_CONDNO_DRI(dst, src, imm) ( _CMOVCC_DSZ32_CONDNO | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ32_CONDNO_DRR(dst, src0, src1) ( _CMOVCC_DSZ32_CONDNO | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ32_CONDB_DRI(dst, src, imm) ( _CMOVCC_DSZ32_CONDB | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ32_CONDB_DRR(dst, src0, src1) ( _CMOVCC_DSZ32_CONDB | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ32_CONDNB_DRI(dst, src, imm) ( _CMOVCC_DSZ32_CONDNB | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ32_CONDNB_DRR(dst, src0, src1) ( _CMOVCC_DSZ32_CONDNB | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ32_CONDZ_DRI(dst, src, imm) ( _CMOVCC_DSZ32_CONDZ | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ32_CONDZ_DRR(dst, src0, src1) ( _CMOVCC_DSZ32_CONDZ | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ32_CONDNZ_DRI(dst, src, imm) ( _CMOVCC_DSZ32_CONDNZ | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ32_CONDNZ_DRR(dst, src0, src1) ( _CMOVCC_DSZ32_CONDNZ | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ32_CONDBE_DRI(dst, src, imm) ( _CMOVCC_DSZ32_CONDBE | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ32_CONDBE_DRR(dst, src0, src1) ( _CMOVCC_DSZ32_CONDBE | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ32_CONDNBE_DRI(dst, src, imm) ( _CMOVCC_DSZ32_CONDNBE | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ32_CONDNBE_DRR(dst, src0, src1) ( _CMOVCC_DSZ32_CONDNBE | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ32_CONDS_DRI(dst, src, imm) ( _CMOVCC_DSZ32_CONDS | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ32_CONDS_DRR(dst, src0, src1) ( _CMOVCC_DSZ32_CONDS | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ32_CONDNS_DRI(dst, src, imm) ( _CMOVCC_DSZ32_CONDNS | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ32_CONDNS_DRR(dst, src0, src1) ( _CMOVCC_DSZ32_CONDNS | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ32_CONDP_DRI(dst, src, imm) ( _CMOVCC_DSZ32_CONDP | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ32_CONDP_DRR(dst, src0, src1) ( _CMOVCC_DSZ32_CONDP | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ32_CONDNP_DRI(dst, src, imm) ( _CMOVCC_DSZ32_CONDNP | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ32_CONDNP_DRR(dst, src0, src1) ( _CMOVCC_DSZ32_CONDNP | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ32_CONDL_DRI(dst, src, imm) ( _CMOVCC_DSZ32_CONDL | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ32_CONDL_DRR(dst, src0, src1) ( _CMOVCC_DSZ32_CONDL | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ32_CONDNL_DRI(dst, src, imm) ( _CMOVCC_DSZ32_CONDNL | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ32_CONDNL_DRR(dst, src0, src1) ( _CMOVCC_DSZ32_CONDNL | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ32_CONDLE_DRI(dst, src, imm) ( _CMOVCC_DSZ32_CONDLE | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ32_CONDLE_DRR(dst, src0, src1) ( _CMOVCC_DSZ32_CONDLE | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ32_CONDNLE_DRI(dst, src, imm) ( _CMOVCC_DSZ32_CONDNLE | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ32_CONDNLE_DRR(dst, src0, src1) ( _CMOVCC_DSZ32_CONDNLE | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ64_CONDO_DRI(dst, src, imm) ( _CMOVCC_DSZ64_CONDO | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ64_CONDO_DRR(dst, src0, src1) ( _CMOVCC_DSZ64_CONDO | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ64_CONDNO_DRI(dst, src, imm) ( _CMOVCC_DSZ64_CONDNO | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ64_CONDNO_DRR(dst, src0, src1) ( _CMOVCC_DSZ64_CONDNO | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ64_CONDB_DRI(dst, src, imm) ( _CMOVCC_DSZ64_CONDB | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ64_CONDB_DRR(dst, src0, src1) ( _CMOVCC_DSZ64_CONDB | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ64_CONDNB_DRI(dst, src, imm) ( _CMOVCC_DSZ64_CONDNB | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ64_CONDNB_DRR(dst, src0, src1) ( _CMOVCC_DSZ64_CONDNB | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ64_CONDZ_DRI(dst, src, imm) ( _CMOVCC_DSZ64_CONDZ | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ64_CONDZ_DRR(dst, src0, src1) ( _CMOVCC_DSZ64_CONDZ | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ64_CONDNZ_DRI(dst, src, imm) ( _CMOVCC_DSZ64_CONDNZ | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ64_CONDNZ_DRR(dst, src0, src1) ( _CMOVCC_DSZ64_CONDNZ | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ64_CONDBE_DRI(dst, src, imm) ( _CMOVCC_DSZ64_CONDBE | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ64_CONDBE_DRR(dst, src0, src1) ( _CMOVCC_DSZ64_CONDBE | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ64_CONDNBE_DRI(dst, src, imm) ( _CMOVCC_DSZ64_CONDNBE | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ64_CONDNBE_DRR(dst, src0, src1) ( _CMOVCC_DSZ64_CONDNBE | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ64_CONDS_DRI(dst, src, imm) ( _CMOVCC_DSZ64_CONDS | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ64_CONDS_DRR(dst, src0, src1) ( _CMOVCC_DSZ64_CONDS | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ64_CONDNS_DRI(dst, src, imm) ( _CMOVCC_DSZ64_CONDNS | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ64_CONDNS_DRR(dst, src0, src1) ( _CMOVCC_DSZ64_CONDNS | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ64_CONDP_DRI(dst, src, imm) ( _CMOVCC_DSZ64_CONDP | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ64_CONDP_DRR(dst, src0, src1) ( _CMOVCC_DSZ64_CONDP | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ64_CONDNP_DRI(dst, src, imm) ( _CMOVCC_DSZ64_CONDNP | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ64_CONDNP_DRR(dst, src0, src1) ( _CMOVCC_DSZ64_CONDNP | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ64_CONDL_DRI(dst, src, imm) ( _CMOVCC_DSZ64_CONDL | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ64_CONDL_DRR(dst, src0, src1) ( _CMOVCC_DSZ64_CONDL | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ64_CONDNL_DRI(dst, src, imm) ( _CMOVCC_DSZ64_CONDNL | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ64_CONDNL_DRR(dst, src0, src1) ( _CMOVCC_DSZ64_CONDNL | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ64_CONDLE_DRI(dst, src, imm) ( _CMOVCC_DSZ64_CONDLE | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ64_CONDLE_DRR(dst, src0, src1) ( _CMOVCC_DSZ64_CONDLE | INSTR_DRR(dst, src0, src1) )
#define CMOVCC_DSZ64_CONDNLE_DRI(dst, src, imm) ( _CMOVCC_DSZ64_CONDNLE | INSTR_DRI(dst, src, imm) )
#define CMOVCC_DSZ64_CONDNLE_DRR(dst, src0, src1) ( _CMOVCC_DSZ64_CONDNLE | INSTR_DRR(dst, src0, src1) )
/** @} */
/** \defgroup SELECTCC
 *  @{
 */
#define SELECTCC_DSZ8_CONDO_DRI(dst, src, imm) ( _SELECTCC_DSZ8_CONDO | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ8_CONDO_DRR(dst, src0, src1) ( _SELECTCC_DSZ8_CONDO | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ8_CONDNO_DRI(dst, src, imm) ( _SELECTCC_DSZ8_CONDNO | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ8_CONDNO_DRR(dst, src0, src1) ( _SELECTCC_DSZ8_CONDNO | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ8_CONDB_DRI(dst, src, imm) ( _SELECTCC_DSZ8_CONDB | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ8_CONDB_DRR(dst, src0, src1) ( _SELECTCC_DSZ8_CONDB | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ8_CONDNB_DRI(dst, src, imm) ( _SELECTCC_DSZ8_CONDNB | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ8_CONDNB_DRR(dst, src0, src1) ( _SELECTCC_DSZ8_CONDNB | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ8_CONDZ_DRI(dst, src, imm) ( _SELECTCC_DSZ8_CONDZ | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ8_CONDZ_DRR(dst, src0, src1) ( _SELECTCC_DSZ8_CONDZ | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ8_CONDNZ_DRI(dst, src, imm) ( _SELECTCC_DSZ8_CONDNZ | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ8_CONDNZ_DRR(dst, src0, src1) ( _SELECTCC_DSZ8_CONDNZ | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ8_CONDBE_DRI(dst, src, imm) ( _SELECTCC_DSZ8_CONDBE | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ8_CONDBE_DRR(dst, src0, src1) ( _SELECTCC_DSZ8_CONDBE | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ8_CONDNBE_DRI(dst, src, imm) ( _SELECTCC_DSZ8_CONDNBE | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ8_CONDNBE_DRR(dst, src0, src1) ( _SELECTCC_DSZ8_CONDNBE | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ8_CONDS_DRI(dst, src, imm) ( _SELECTCC_DSZ8_CONDS | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ8_CONDS_DRR(dst, src0, src1) ( _SELECTCC_DSZ8_CONDS | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ8_CONDNS_DRI(dst, src, imm) ( _SELECTCC_DSZ8_CONDNS | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ8_CONDNS_DRR(dst, src0, src1) ( _SELECTCC_DSZ8_CONDNS | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ8_CONDP_DRI(dst, src, imm) ( _SELECTCC_DSZ8_CONDP | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ8_CONDP_DRR(dst, src0, src1) ( _SELECTCC_DSZ8_CONDP | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ8_CONDNP_DRI(dst, src, imm) ( _SELECTCC_DSZ8_CONDNP | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ8_CONDNP_DRR(dst, src0, src1) ( _SELECTCC_DSZ8_CONDNP | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ8_CONDL_DRI(dst, src, imm) ( _SELECTCC_DSZ8_CONDL | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ8_CONDL_DRR(dst, src0, src1) ( _SELECTCC_DSZ8_CONDL | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ8_CONDNL_DRI(dst, src, imm) ( _SELECTCC_DSZ8_CONDNL | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ8_CONDNL_DRR(dst, src0, src1) ( _SELECTCC_DSZ8_CONDNL | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ8_CONDLE_DRI(dst, src, imm) ( _SELECTCC_DSZ8_CONDLE | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ8_CONDLE_DRR(dst, src0, src1) ( _SELECTCC_DSZ8_CONDLE | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ8_CONDNLE_DRI(dst, src, imm) ( _SELECTCC_DSZ8_CONDNLE | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ8_CONDNLE_DRR(dst, src0, src1) ( _SELECTCC_DSZ8_CONDNLE | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ16_CONDO_DRI(dst, src, imm) ( _SELECTCC_DSZ16_CONDO | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ16_CONDO_DRR(dst, src0, src1) ( _SELECTCC_DSZ16_CONDO | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ16_CONDNO_DRI(dst, src, imm) ( _SELECTCC_DSZ16_CONDNO | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ16_CONDNO_DRR(dst, src0, src1) ( _SELECTCC_DSZ16_CONDNO | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ16_CONDB_DRI(dst, src, imm) ( _SELECTCC_DSZ16_CONDB | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ16_CONDB_DRR(dst, src0, src1) ( _SELECTCC_DSZ16_CONDB | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ16_CONDNB_DRI(dst, src, imm) ( _SELECTCC_DSZ16_CONDNB | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ16_CONDNB_DRR(dst, src0, src1) ( _SELECTCC_DSZ16_CONDNB | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ16_CONDZ_DRI(dst, src, imm) ( _SELECTCC_DSZ16_CONDZ | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ16_CONDZ_DRR(dst, src0, src1) ( _SELECTCC_DSZ16_CONDZ | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ16_CONDNZ_DRI(dst, src, imm) ( _SELECTCC_DSZ16_CONDNZ | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ16_CONDNZ_DRR(dst, src0, src1) ( _SELECTCC_DSZ16_CONDNZ | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ16_CONDBE_DRI(dst, src, imm) ( _SELECTCC_DSZ16_CONDBE | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ16_CONDBE_DRR(dst, src0, src1) ( _SELECTCC_DSZ16_CONDBE | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ16_CONDNBE_DRI(dst, src, imm) ( _SELECTCC_DSZ16_CONDNBE | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ16_CONDNBE_DRR(dst, src0, src1) ( _SELECTCC_DSZ16_CONDNBE | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ16_CONDS_DRI(dst, src, imm) ( _SELECTCC_DSZ16_CONDS | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ16_CONDS_DRR(dst, src0, src1) ( _SELECTCC_DSZ16_CONDS | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ16_CONDNS_DRI(dst, src, imm) ( _SELECTCC_DSZ16_CONDNS | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ16_CONDNS_DRR(dst, src0, src1) ( _SELECTCC_DSZ16_CONDNS | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ16_CONDP_DRI(dst, src, imm) ( _SELECTCC_DSZ16_CONDP | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ16_CONDP_DRR(dst, src0, src1) ( _SELECTCC_DSZ16_CONDP | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ16_CONDNP_DRI(dst, src, imm) ( _SELECTCC_DSZ16_CONDNP | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ16_CONDNP_DRR(dst, src0, src1) ( _SELECTCC_DSZ16_CONDNP | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ16_CONDL_DRI(dst, src, imm) ( _SELECTCC_DSZ16_CONDL | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ16_CONDL_DRR(dst, src0, src1) ( _SELECTCC_DSZ16_CONDL | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ16_CONDNL_DRI(dst, src, imm) ( _SELECTCC_DSZ16_CONDNL | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ16_CONDNL_DRR(dst, src0, src1) ( _SELECTCC_DSZ16_CONDNL | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ16_CONDLE_DRI(dst, src, imm) ( _SELECTCC_DSZ16_CONDLE | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ16_CONDLE_DRR(dst, src0, src1) ( _SELECTCC_DSZ16_CONDLE | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ16_CONDNLE_DRI(dst, src, imm) ( _SELECTCC_DSZ16_CONDNLE | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ16_CONDNLE_DRR(dst, src0, src1) ( _SELECTCC_DSZ16_CONDNLE | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ32_CONDO_DRI(dst, src, imm) ( _SELECTCC_DSZ32_CONDO | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ32_CONDO_DRR(dst, src0, src1) ( _SELECTCC_DSZ32_CONDO | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ32_CONDNO_DRI(dst, src, imm) ( _SELECTCC_DSZ32_CONDNO | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ32_CONDNO_DRR(dst, src0, src1) ( _SELECTCC_DSZ32_CONDNO | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ32_CONDB_DRI(dst, src, imm) ( _SELECTCC_DSZ32_CONDB | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ32_CONDB_DRR(dst, src0, src1) ( _SELECTCC_DSZ32_CONDB | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ32_CONDNB_DRI(dst, src, imm) ( _SELECTCC_DSZ32_CONDNB | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ32_CONDNB_DRR(dst, src0, src1) ( _SELECTCC_DSZ32_CONDNB | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ32_CONDZ_DRI(dst, src, imm) ( _SELECTCC_DSZ32_CONDZ | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ32_CONDZ_DRR(dst, src0, src1) ( _SELECTCC_DSZ32_CONDZ | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ32_CONDNZ_DRI(dst, src, imm) ( _SELECTCC_DSZ32_CONDNZ | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ32_CONDNZ_DRR(dst, src0, src1) ( _SELECTCC_DSZ32_CONDNZ | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ32_CONDBE_DRI(dst, src, imm) ( _SELECTCC_DSZ32_CONDBE | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ32_CONDBE_DRR(dst, src0, src1) ( _SELECTCC_DSZ32_CONDBE | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ32_CONDNBE_DRI(dst, src, imm) ( _SELECTCC_DSZ32_CONDNBE | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ32_CONDNBE_DRR(dst, src0, src1) ( _SELECTCC_DSZ32_CONDNBE | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ32_CONDS_DRI(dst, src, imm) ( _SELECTCC_DSZ32_CONDS | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ32_CONDS_DRR(dst, src0, src1) ( _SELECTCC_DSZ32_CONDS | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ32_CONDNS_DRI(dst, src, imm) ( _SELECTCC_DSZ32_CONDNS | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ32_CONDNS_DRR(dst, src0, src1) ( _SELECTCC_DSZ32_CONDNS | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ32_CONDP_DRI(dst, src, imm) ( _SELECTCC_DSZ32_CONDP | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ32_CONDP_DRR(dst, src0, src1) ( _SELECTCC_DSZ32_CONDP | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ32_CONDNP_DRI(dst, src, imm) ( _SELECTCC_DSZ32_CONDNP | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ32_CONDNP_DRR(dst, src0, src1) ( _SELECTCC_DSZ32_CONDNP | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ32_CONDL_DRI(dst, src, imm) ( _SELECTCC_DSZ32_CONDL | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ32_CONDL_DRR(dst, src0, src1) ( _SELECTCC_DSZ32_CONDL | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ32_CONDNL_DRI(dst, src, imm) ( _SELECTCC_DSZ32_CONDNL | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ32_CONDNL_DRR(dst, src0, src1) ( _SELECTCC_DSZ32_CONDNL | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ32_CONDLE_DRI(dst, src, imm) ( _SELECTCC_DSZ32_CONDLE | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ32_CONDLE_DRR(dst, src0, src1) ( _SELECTCC_DSZ32_CONDLE | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ32_CONDNLE_DRI(dst, src, imm) ( _SELECTCC_DSZ32_CONDNLE | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ32_CONDNLE_DRR(dst, src0, src1) ( _SELECTCC_DSZ32_CONDNLE | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ64_CONDO_DRI(dst, src, imm) ( _SELECTCC_DSZ64_CONDO | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ64_CONDO_DRR(dst, src0, src1) ( _SELECTCC_DSZ64_CONDO | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ64_CONDNO_DRI(dst, src, imm) ( _SELECTCC_DSZ64_CONDNO | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ64_CONDNO_DRR(dst, src0, src1) ( _SELECTCC_DSZ64_CONDNO | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ64_CONDB_DRI(dst, src, imm) ( _SELECTCC_DSZ64_CONDB | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ64_CONDB_DRR(dst, src0, src1) ( _SELECTCC_DSZ64_CONDB | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ64_CONDNB_DRI(dst, src, imm) ( _SELECTCC_DSZ64_CONDNB | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ64_CONDNB_DRR(dst, src0, src1) ( _SELECTCC_DSZ64_CONDNB | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ64_CONDZ_DRI(dst, src, imm) ( _SELECTCC_DSZ64_CONDZ | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ64_CONDZ_DRR(dst, src0, src1) ( _SELECTCC_DSZ64_CONDZ | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ64_CONDNZ_DRI(dst, src, imm) ( _SELECTCC_DSZ64_CONDNZ | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ64_CONDNZ_DRR(dst, src0, src1) ( _SELECTCC_DSZ64_CONDNZ | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ64_CONDBE_DRI(dst, src, imm) ( _SELECTCC_DSZ64_CONDBE | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ64_CONDBE_DRR(dst, src0, src1) ( _SELECTCC_DSZ64_CONDBE | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ64_CONDNBE_DRI(dst, src, imm) ( _SELECTCC_DSZ64_CONDNBE | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ64_CONDNBE_DRR(dst, src0, src1) ( _SELECTCC_DSZ64_CONDNBE | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ64_CONDS_DRI(dst, src, imm) ( _SELECTCC_DSZ64_CONDS | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ64_CONDS_DRR(dst, src0, src1) ( _SELECTCC_DSZ64_CONDS | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ64_CONDNS_DRI(dst, src, imm) ( _SELECTCC_DSZ64_CONDNS | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ64_CONDNS_DRR(dst, src0, src1) ( _SELECTCC_DSZ64_CONDNS | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ64_CONDP_DRI(dst, src, imm) ( _SELECTCC_DSZ64_CONDP | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ64_CONDP_DRR(dst, src0, src1) ( _SELECTCC_DSZ64_CONDP | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ64_CONDNP_DRI(dst, src, imm) ( _SELECTCC_DSZ64_CONDNP | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ64_CONDNP_DRR(dst, src0, src1) ( _SELECTCC_DSZ64_CONDNP | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ64_CONDL_DRI(dst, src, imm) ( _SELECTCC_DSZ64_CONDL | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ64_CONDL_DRR(dst, src0, src1) ( _SELECTCC_DSZ64_CONDL | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ64_CONDNL_DRI(dst, src, imm) ( _SELECTCC_DSZ64_CONDNL | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ64_CONDNL_DRR(dst, src0, src1) ( _SELECTCC_DSZ64_CONDNL | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ64_CONDLE_DRI(dst, src, imm) ( _SELECTCC_DSZ64_CONDLE | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ64_CONDLE_DRR(dst, src0, src1) ( _SELECTCC_DSZ64_CONDLE | INSTR_DRR(dst, src0, src1) )
#define SELECTCC_DSZ64_CONDNLE_DRI(dst, src, imm) ( _SELECTCC_DSZ64_CONDNLE | INSTR_DRI(dst, src, imm) )
#define SELECTCC_DSZ64_CONDNLE_DRR(dst, src0, src1) ( _SELECTCC_DSZ64_CONDNLE | INSTR_DRR(dst, src0, src1) )
/** @} */
/** \defgroup LDZX
 *  @{
 */
#define LDZX_DSZ8_ASZ64_SC1_DR(dst, base_reg, seg) ( _LDZX_DSZ8_ASZ64_SC1 | MEMOP_ENCODE(dst, base_reg, 0, 0, seg) )
#define LDZX_DSZ8_ASZ64_SC1_DRR(dst, base_reg, index_reg, seg) ( _LDZX_DSZ8_ASZ64_SC1 | MEMOP_ENCODE(dst, base_reg, index_reg, 0, seg) )
#define LDZX_DSZ8_ASZ64_SC1_DRI(dst, base_reg, offset, seg) ( _LDZX_DSZ8_ASZ64_SC1 | MEMOP_ENCODE(dst, base_reg, 0, offset, seg) )
#define LDZX_DSZ8_ASZ64_SC1_DRRI(dst, base_reg, index_reg, offset, seg) ( _LDZX_DSZ8_ASZ64_SC1 | MEMOP_ENCODE(dst, base_reg, index_reg, offset, seg) )
#define LDZX_DSZ8_ASZ64_SC4_DR(dst, base_reg, seg) ( _LDZX_DSZ8_ASZ64_SC4 | MEMOP_ENCODE(dst, base_reg, 0, 0, seg) )
#define LDZX_DSZ8_ASZ64_SC4_DRR(dst, base_reg, index_reg, seg) ( _LDZX_DSZ8_ASZ64_SC4 | MEMOP_ENCODE(dst, base_reg, index_reg, 0, seg) )
#define LDZX_DSZ8_ASZ64_SC4_DRI(dst, base_reg, offset, seg) ( _LDZX_DSZ8_ASZ64_SC4 | MEMOP_ENCODE(dst, base_reg, 0, offset, seg) )
#define LDZX_DSZ8_ASZ64_SC4_DRRI(dst, base_reg, index_reg, offset, seg) ( _LDZX_DSZ8_ASZ64_SC4 | MEMOP_ENCODE(dst, base_reg, index_reg, offset, seg) )
#define LDZX_DSZ8_ASZ64_SC8_DR(dst, base_reg, seg) ( _LDZX_DSZ8_ASZ64_SC8 | MEMOP_ENCODE(dst, base_reg, 0, 0, seg) )
#define LDZX_DSZ8_ASZ64_SC8_DRR(dst, base_reg, index_reg, seg) ( _LDZX_DSZ8_ASZ64_SC8 | MEMOP_ENCODE(dst, base_reg, index_reg, 0, seg) )
#define LDZX_DSZ8_ASZ64_SC8_DRI(dst, base_reg, offset, seg) ( _LDZX_DSZ8_ASZ64_SC8 | MEMOP_ENCODE(dst, base_reg, 0, offset, seg) )
#define LDZX_DSZ8_ASZ64_SC8_DRRI(dst, base_reg, index_reg, offset, seg) ( _LDZX_DSZ8_ASZ64_SC8 | MEMOP_ENCODE(dst, base_reg, index_reg, offset, seg) )
#define LDZX_DSZ8_ASZ32_SC1_DR(dst, base_reg, seg) ( _LDZX_DSZ8_ASZ32_SC1 | MEMOP_ENCODE(dst, base_reg, 0, 0, seg) )
#define LDZX_DSZ8_ASZ32_SC1_DRR(dst, base_reg, index_reg, seg) ( _LDZX_DSZ8_ASZ32_SC1 | MEMOP_ENCODE(dst, base_reg, index_reg, 0, seg) )
#define LDZX_DSZ8_ASZ32_SC1_DRI(dst, base_reg, offset, seg) ( _LDZX_DSZ8_ASZ32_SC1 | MEMOP_ENCODE(dst, base_reg, 0, offset, seg) )
#define LDZX_DSZ8_ASZ32_SC1_DRRI(dst, base_reg, index_reg, offset, seg) ( _LDZX_DSZ8_ASZ32_SC1 | MEMOP_ENCODE(dst, base_reg, index_reg, offset, seg) )
#define LDZX_DSZ8_ASZ32_SC4_DR(dst, base_reg, seg) ( _LDZX_DSZ8_ASZ32_SC4 | MEMOP_ENCODE(dst, base_reg, 0, 0, seg) )
#define LDZX_DSZ8_ASZ32_SC4_DRR(dst, base_reg, index_reg, seg) ( _LDZX_DSZ8_ASZ32_SC4 | MEMOP_ENCODE(dst, base_reg, index_reg, 0, seg) )
#define LDZX_DSZ8_ASZ32_SC4_DRI(dst, base_reg, offset, seg) ( _LDZX_DSZ8_ASZ32_SC4 | MEMOP_ENCODE(dst, base_reg, 0, offset, seg) )
#define LDZX_DSZ8_ASZ32_SC4_DRRI(dst, base_reg, index_reg, offset, seg) ( _LDZX_DSZ8_ASZ32_SC4 | MEMOP_ENCODE(dst, base_reg, index_reg, offset, seg) )
#define LDZX_DSZ8_ASZ32_SC8_DR(dst, base_reg, seg) ( _LDZX_DSZ8_ASZ32_SC8 | MEMOP_ENCODE(dst, base_reg, 0, 0, seg) )
#define LDZX_DSZ8_ASZ32_SC8_DRR(dst, base_reg, index_reg, seg) ( _LDZX_DSZ8_ASZ32_SC8 | MEMOP_ENCODE(dst, base_reg, index_reg, 0, seg) )
#define LDZX_DSZ8_ASZ32_SC8_DRI(dst, base_reg, offset, seg) ( _LDZX_DSZ8_ASZ32_SC8 | MEMOP_ENCODE(dst, base_reg, 0, offset, seg) )
#define LDZX_DSZ8_ASZ32_SC8_DRRI(dst, base_reg, index_reg, offset, seg) ( _LDZX_DSZ8_ASZ32_SC8 | MEMOP_ENCODE(dst, base_reg, index_reg, offset, seg) )
#define LDZX_DSZ8_ASZ16_SC1_DR(dst, base_reg, seg) ( _LDZX_DSZ8_ASZ16_SC1 | MEMOP_ENCODE(dst, base_reg, 0, 0, seg) )
#define LDZX_DSZ8_ASZ16_SC1_DRR(dst, base_reg, index_reg, seg) ( _LDZX_DSZ8_ASZ16_SC1 | MEMOP_ENCODE(dst, base_reg, index_reg, 0, seg) )
#define LDZX_DSZ8_ASZ16_SC1_DRI(dst, base_reg, offset, seg) ( _LDZX_DSZ8_ASZ16_SC1 | MEMOP_ENCODE(dst, base_reg, 0, offset, seg) )
#define LDZX_DSZ8_ASZ16_SC1_DRRI(dst, base_reg, index_reg, offset, seg) ( _LDZX_DSZ8_ASZ16_SC1 | MEMOP_ENCODE(dst, base_reg, index_reg, offset, seg) )
#define LDZX_DSZ8_ASZ16_SC4_DR(dst, base_reg, seg) ( _LDZX_DSZ8_ASZ16_SC4 | MEMOP_ENCODE(dst, base_reg, 0, 0, seg) )
#define LDZX_DSZ8_ASZ16_SC4_DRR(dst, base_reg, index_reg, seg) ( _LDZX_DSZ8_ASZ16_SC4 | MEMOP_ENCODE(dst, base_reg, index_reg, 0, seg) )
#define LDZX_DSZ8_ASZ16_SC4_DRI(dst, base_reg, offset, seg) ( _LDZX_DSZ8_ASZ16_SC4 | MEMOP_ENCODE(dst, base_reg, 0, offset, seg) )
#define LDZX_DSZ8_ASZ16_SC4_DRRI(dst, base_reg, index_reg, offset, seg) ( _LDZX_DSZ8_ASZ16_SC4 | MEMOP_ENCODE(dst, base_reg, index_reg, offset, seg) )
#define LDZX_DSZ8_ASZ16_SC8_DR(dst, base_reg, seg) ( _LDZX_DSZ8_ASZ16_SC8 | MEMOP_ENCODE(dst, base_reg, 0, 0, seg) )
#define LDZX_DSZ8_ASZ16_SC8_DRR(dst, base_reg, index_reg, seg) ( _LDZX_DSZ8_ASZ16_SC8 | MEMOP_ENCODE(dst, base_reg, index_reg, 0, seg) )
#define LDZX_DSZ8_ASZ16_SC8_DRI(dst, base_reg, offset, seg) ( _LDZX_DSZ8_ASZ16_SC8 | MEMOP_ENCODE(dst, base_reg, 0, offset, seg) )
#define LDZX_DSZ8_ASZ16_SC8_DRRI(dst, base_reg, index_reg, offset, seg) ( _LDZX_DSZ8_ASZ16_SC8 | MEMOP_ENCODE(dst, base_reg, index_reg, offset, seg) )
#define LDZX_DSZ16_ASZ64_SC1_DR(dst, base_reg, seg) ( _LDZX_DSZ16_ASZ64_SC1 | MEMOP_ENCODE(dst, base_reg, 0, 0, seg) )
#define LDZX_DSZ16_ASZ64_SC1_DRR(dst, base_reg, index_reg, seg) ( _LDZX_DSZ16_ASZ64_SC1 | MEMOP_ENCODE(dst, base_reg, index_reg, 0, seg) )
#define LDZX_DSZ16_ASZ64_SC1_DRI(dst, base_reg, offset, seg) ( _LDZX_DSZ16_ASZ64_SC1 | MEMOP_ENCODE(dst, base_reg, 0, offset, seg) )
#define LDZX_DSZ16_ASZ64_SC1_DRRI(dst, base_reg, index_reg, offset, seg) ( _LDZX_DSZ16_ASZ64_SC1 | MEMOP_ENCODE(dst, base_reg, index_reg, offset, seg) )
#define LDZX_DSZ16_ASZ64_SC4_DR(dst, base_reg, seg) ( _LDZX_DSZ16_ASZ64_SC4 | MEMOP_ENCODE(dst, base_reg, 0, 0, seg) )
#define LDZX_DSZ16_ASZ64_SC4_DRR(dst, base_reg, index_reg, seg) ( _LDZX_DSZ16_ASZ64_SC4 | MEMOP_ENCODE(dst, base_reg, index_reg, 0, seg) )
#define LDZX_DSZ16_ASZ64_SC4_DRI(dst, base_reg, offset, seg) ( _LDZX_DSZ16_ASZ64_SC4 | MEMOP_ENCODE(dst, base_reg, 0, offset, seg) )
#define LDZX_DSZ16_ASZ64_SC4_DRRI(dst, base_reg, index_reg, offset, seg) ( _LDZX_DSZ16_ASZ64_SC4 | MEMOP_ENCODE(dst, base_reg, index_reg, offset, seg) )
#define LDZX_DSZ16_ASZ64_SC8_DR(dst, base_reg, seg) ( _LDZX_DSZ16_ASZ64_SC8 | MEMOP_ENCODE(dst, base_reg, 0, 0, seg) )
#define LDZX_DSZ16_ASZ64_SC8_DRR(dst, base_reg, index_reg, seg) ( _LDZX_DSZ16_ASZ64_SC8 | MEMOP_ENCODE(dst, base_reg, index_reg, 0, seg) )
#define LDZX_DSZ16_ASZ64_SC8_DRI(dst, base_reg, offset, seg) ( _LDZX_DSZ16_ASZ64_SC8 | MEMOP_ENCODE(dst, base_reg, 0, offset, seg) )
#define LDZX_DSZ16_ASZ64_SC8_DRRI(dst, base_reg, index_reg, offset, seg) ( _LDZX_DSZ16_ASZ64_SC8 | MEMOP_ENCODE(dst, base_reg, index_reg, offset, seg) )
#define LDZX_DSZ16_ASZ32_SC1_DR(dst, base_reg, seg) ( _LDZX_DSZ16_ASZ32_SC1 | MEMOP_ENCODE(dst, base_reg, 0, 0, seg) )
#define LDZX_DSZ16_ASZ32_SC1_DRR(dst, base_reg, index_reg, seg) ( _LDZX_DSZ16_ASZ32_SC1 | MEMOP_ENCODE(dst, base_reg, index_reg, 0, seg) )
#define LDZX_DSZ16_ASZ32_SC1_DRI(dst, base_reg, offset, seg) ( _LDZX_DSZ16_ASZ32_SC1 | MEMOP_ENCODE(dst, base_reg, 0, offset, seg) )
#define LDZX_DSZ16_ASZ32_SC1_DRRI(dst, base_reg, index_reg, offset, seg) ( _LDZX_DSZ16_ASZ32_SC1 | MEMOP_ENCODE(dst, base_reg, index_reg, offset, seg) )
#define LDZX_DSZ16_ASZ32_SC4_DR(dst, base_reg, seg) ( _LDZX_DSZ16_ASZ32_SC4 | MEMOP_ENCODE(dst, base_reg, 0, 0, seg) )
#define LDZX_DSZ16_ASZ32_SC4_DRR(dst, base_reg, index_reg, seg) ( _LDZX_DSZ16_ASZ32_SC4 | MEMOP_ENCODE(dst, base_reg, index_reg, 0, seg) )
#define LDZX_DSZ16_ASZ32_SC4_DRI(dst, base_reg, offset, seg) ( _LDZX_DSZ16_ASZ32_SC4 | MEMOP_ENCODE(dst, base_reg, 0, offset, seg) )
#define LDZX_DSZ16_ASZ32_SC4_DRRI(dst, base_reg, index_reg, offset, seg) ( _LDZX_DSZ16_ASZ32_SC4 | MEMOP_ENCODE(dst, base_reg, index_reg, offset, seg) )
#define LDZX_DSZ16_ASZ32_SC8_DR(dst, base_reg, seg) ( _LDZX_DSZ16_ASZ32_SC8 | MEMOP_ENCODE(dst, base_reg, 0, 0, seg) )
#define LDZX_DSZ16_ASZ32_SC8_DRR(dst, base_reg, index_reg, seg) ( _LDZX_DSZ16_ASZ32_SC8 | MEMOP_ENCODE(dst, base_reg, index_reg, 0, seg) )
#define LDZX_DSZ16_ASZ32_SC8_DRI(dst, base_reg, offset, seg) ( _LDZX_DSZ16_ASZ32_SC8 | MEMOP_ENCODE(dst, base_reg, 0, offset, seg) )
#define LDZX_DSZ16_ASZ32_SC8_DRRI(dst, base_reg, index_reg, offset, seg) ( _LDZX_DSZ16_ASZ32_SC8 | MEMOP_ENCODE(dst, base_reg, index_reg, offset, seg) )
#define LDZX_DSZ16_ASZ16_SC1_DR(dst, base_reg, seg) ( _LDZX_DSZ16_ASZ16_SC1 | MEMOP_ENCODE(dst, base_reg, 0, 0, seg) )
#define LDZX_DSZ16_ASZ16_SC1_DRR(dst, base_reg, index_reg, seg) ( _LDZX_DSZ16_ASZ16_SC1 | MEMOP_ENCODE(dst, base_reg, index_reg, 0, seg) )
#define LDZX_DSZ16_ASZ16_SC1_DRI(dst, base_reg, offset, seg) ( _LDZX_DSZ16_ASZ16_SC1 | MEMOP_ENCODE(dst, base_reg, 0, offset, seg) )
#define LDZX_DSZ16_ASZ16_SC1_DRRI(dst, base_reg, index_reg, offset, seg) ( _LDZX_DSZ16_ASZ16_SC1 | MEMOP_ENCODE(dst, base_reg, index_reg, offset, seg) )
#define LDZX_DSZ16_ASZ16_SC4_DR(dst, base_reg, seg) ( _LDZX_DSZ16_ASZ16_SC4 | MEMOP_ENCODE(dst, base_reg, 0, 0, seg) )
#define LDZX_DSZ16_ASZ16_SC4_DRR(dst, base_reg, index_reg, seg) ( _LDZX_DSZ16_ASZ16_SC4 | MEMOP_ENCODE(dst, base_reg, index_reg, 0, seg) )
#define LDZX_DSZ16_ASZ16_SC4_DRI(dst, base_reg, offset, seg) ( _LDZX_DSZ16_ASZ16_SC4 | MEMOP_ENCODE(dst, base_reg, 0, offset, seg) )
#define LDZX_DSZ16_ASZ16_SC4_DRRI(dst, base_reg, index_reg, offset, seg) ( _LDZX_DSZ16_ASZ16_SC4 | MEMOP_ENCODE(dst, base_reg, index_reg, offset, seg) )
#define LDZX_DSZ16_ASZ16_SC8_DR(dst, base_reg, seg) ( _LDZX_DSZ16_ASZ16_SC8 | MEMOP_ENCODE(dst, base_reg, 0, 0, seg) )
#define LDZX_DSZ16_ASZ16_SC8_DRR(dst, base_reg, index_reg, seg) ( _LDZX_DSZ16_ASZ16_SC8 | MEMOP_ENCODE(dst, base_reg, index_reg, 0, seg) )
#define LDZX_DSZ16_ASZ16_SC8_DRI(dst, base_reg, offset, seg) ( _LDZX_DSZ16_ASZ16_SC8 | MEMOP_ENCODE(dst, base_reg, 0, offset, seg) )
#define LDZX_DSZ16_ASZ16_SC8_DRRI(dst, base_reg, index_reg, offset, seg) ( _LDZX_DSZ16_ASZ16_SC8 | MEMOP_ENCODE(dst, base_reg, index_reg, offset, seg) )
#define LDZX_DSZ32_ASZ64_SC1_DR(dst, base_reg, seg) ( _LDZX_DSZ32_ASZ64_SC1 | MEMOP_ENCODE(dst, base_reg, 0, 0, seg) )
#define LDZX_DSZ32_ASZ64_SC1_DRR(dst, base_reg, index_reg, seg) ( _LDZX_DSZ32_ASZ64_SC1 | MEMOP_ENCODE(dst, base_reg, index_reg, 0, seg) )
#define LDZX_DSZ32_ASZ64_SC1_DRI(dst, base_reg, offset, seg) ( _LDZX_DSZ32_ASZ64_SC1 | MEMOP_ENCODE(dst, base_reg, 0, offset, seg) )
#define LDZX_DSZ32_ASZ64_SC1_DRRI(dst, base_reg, index_reg, offset, seg) ( _LDZX_DSZ32_ASZ64_SC1 | MEMOP_ENCODE(dst, base_reg, index_reg, offset, seg) )
#define LDZX_DSZ32_ASZ64_SC4_DR(dst, base_reg, seg) ( _LDZX_DSZ32_ASZ64_SC4 | MEMOP_ENCODE(dst, base_reg, 0, 0, seg) )
#define LDZX_DSZ32_ASZ64_SC4_DRR(dst, base_reg, index_reg, seg) ( _LDZX_DSZ32_ASZ64_SC4 | MEMOP_ENCODE(dst, base_reg, index_reg, 0, seg) )
#define LDZX_DSZ32_ASZ64_SC4_DRI(dst, base_reg, offset, seg) ( _LDZX_DSZ32_ASZ64_SC4 | MEMOP_ENCODE(dst, base_reg, 0, offset, seg) )
#define LDZX_DSZ32_ASZ64_SC4_DRRI(dst, base_reg, index_reg, offset, seg) ( _LDZX_DSZ32_ASZ64_SC4 | MEMOP_ENCODE(dst, base_reg, index_reg, offset, seg) )
#define LDZX_DSZ32_ASZ64_SC8_DR(dst, base_reg, seg) ( _LDZX_DSZ32_ASZ64_SC8 | MEMOP_ENCODE(dst, base_reg, 0, 0, seg) )
#define LDZX_DSZ32_ASZ64_SC8_DRR(dst, base_reg, index_reg, seg) ( _LDZX_DSZ32_ASZ64_SC8 | MEMOP_ENCODE(dst, base_reg, index_reg, 0, seg) )
#define LDZX_DSZ32_ASZ64_SC8_DRI(dst, base_reg, offset, seg) ( _LDZX_DSZ32_ASZ64_SC8 | MEMOP_ENCODE(dst, base_reg, 0, offset, seg) )
#define LDZX_DSZ32_ASZ64_SC8_DRRI(dst, base_reg, index_reg, offset, seg) ( _LDZX_DSZ32_ASZ64_SC8 | MEMOP_ENCODE(dst, base_reg, index_reg, offset, seg) )
#define LDZX_DSZ32_ASZ32_SC1_DR(dst, base_reg, seg) ( _LDZX_DSZ32_ASZ32_SC1 | MEMOP_ENCODE(dst, base_reg, 0, 0, seg) )
#define LDZX_DSZ32_ASZ32_SC1_DRR(dst, base_reg, index_reg, seg) ( _LDZX_DSZ32_ASZ32_SC1 | MEMOP_ENCODE(dst, base_reg, index_reg, 0, seg) )
#define LDZX_DSZ32_ASZ32_SC1_DRI(dst, base_reg, offset, seg) ( _LDZX_DSZ32_ASZ32_SC1 | MEMOP_ENCODE(dst, base_reg, 0, offset, seg) )
#define LDZX_DSZ32_ASZ32_SC1_DRRI(dst, base_reg, index_reg, offset, seg) ( _LDZX_DSZ32_ASZ32_SC1 | MEMOP_ENCODE(dst, base_reg, index_reg, offset, seg) )
#define LDZX_DSZ32_ASZ32_SC4_DR(dst, base_reg, seg) ( _LDZX_DSZ32_ASZ32_SC4 | MEMOP_ENCODE(dst, base_reg, 0, 0, seg) )
#define LDZX_DSZ32_ASZ32_SC4_DRR(dst, base_reg, index_reg, seg) ( _LDZX_DSZ32_ASZ32_SC4 | MEMOP_ENCODE(dst, base_reg, index_reg, 0, seg) )
#define LDZX_DSZ32_ASZ32_SC4_DRI(dst, base_reg, offset, seg) ( _LDZX_DSZ32_ASZ32_SC4 | MEMOP_ENCODE(dst, base_reg, 0, offset, seg) )
#define LDZX_DSZ32_ASZ32_SC4_DRRI(dst, base_reg, index_reg, offset, seg) ( _LDZX_DSZ32_ASZ32_SC4 | MEMOP_ENCODE(dst, base_reg, index_reg, offset, seg) )
#define LDZX_DSZ32_ASZ32_SC8_DR(dst, base_reg, seg) ( _LDZX_DSZ32_ASZ32_SC8 | MEMOP_ENCODE(dst, base_reg, 0, 0, seg) )
#define LDZX_DSZ32_ASZ32_SC8_DRR(dst, base_reg, index_reg, seg) ( _LDZX_DSZ32_ASZ32_SC8 | MEMOP_ENCODE(dst, base_reg, index_reg, 0, seg) )
#define LDZX_DSZ32_ASZ32_SC8_DRI(dst, base_reg, offset, seg) ( _LDZX_DSZ32_ASZ32_SC8 | MEMOP_ENCODE(dst, base_reg, 0, offset, seg) )
#define LDZX_DSZ32_ASZ32_SC8_DRRI(dst, base_reg, index_reg, offset, seg) ( _LDZX_DSZ32_ASZ32_SC8 | MEMOP_ENCODE(dst, base_reg, index_reg, offset, seg) )
#define LDZX_DSZ32_ASZ16_SC1_DR(dst, base_reg, seg) ( _LDZX_DSZ32_ASZ16_SC1 | MEMOP_ENCODE(dst, base_reg, 0, 0, seg) )
#define LDZX_DSZ32_ASZ16_SC1_DRR(dst, base_reg, index_reg, seg) ( _LDZX_DSZ32_ASZ16_SC1 | MEMOP_ENCODE(dst, base_reg, index_reg, 0, seg) )
#define LDZX_DSZ32_ASZ16_SC1_DRI(dst, base_reg, offset, seg) ( _LDZX_DSZ32_ASZ16_SC1 | MEMOP_ENCODE(dst, base_reg, 0, offset, seg) )
#define LDZX_DSZ32_ASZ16_SC1_DRRI(dst, base_reg, index_reg, offset, seg) ( _LDZX_DSZ32_ASZ16_SC1 | MEMOP_ENCODE(dst, base_reg, index_reg, offset, seg) )
#define LDZX_DSZ32_ASZ16_SC4_DR(dst, base_reg, seg) ( _LDZX_DSZ32_ASZ16_SC4 | MEMOP_ENCODE(dst, base_reg, 0, 0, seg) )
#define LDZX_DSZ32_ASZ16_SC4_DRR(dst, base_reg, index_reg, seg) ( _LDZX_DSZ32_ASZ16_SC4 | MEMOP_ENCODE(dst, base_reg, index_reg, 0, seg) )
#define LDZX_DSZ32_ASZ16_SC4_DRI(dst, base_reg, offset, seg) ( _LDZX_DSZ32_ASZ16_SC4 | MEMOP_ENCODE(dst, base_reg, 0, offset, seg) )
#define LDZX_DSZ32_ASZ16_SC4_DRRI(dst, base_reg, index_reg, offset, seg) ( _LDZX_DSZ32_ASZ16_SC4 | MEMOP_ENCODE(dst, base_reg, index_reg, offset, seg) )
#define LDZX_DSZ32_ASZ16_SC8_DR(dst, base_reg, seg) ( _LDZX_DSZ32_ASZ16_SC8 | MEMOP_ENCODE(dst, base_reg, 0, 0, seg) )
#define LDZX_DSZ32_ASZ16_SC8_DRR(dst, base_reg, index_reg, seg) ( _LDZX_DSZ32_ASZ16_SC8 | MEMOP_ENCODE(dst, base_reg, index_reg, 0, seg) )
#define LDZX_DSZ32_ASZ16_SC8_DRI(dst, base_reg, offset, seg) ( _LDZX_DSZ32_ASZ16_SC8 | MEMOP_ENCODE(dst, base_reg, 0, offset, seg) )
#define LDZX_DSZ32_ASZ16_SC8_DRRI(dst, base_reg, index_reg, offset, seg) ( _LDZX_DSZ32_ASZ16_SC8 | MEMOP_ENCODE(dst, base_reg, index_reg, offset, seg) )
#define LDZX_DSZ64_ASZ64_SC1_DR(dst, base_reg, seg) ( _LDZX_DSZ64_ASZ64_SC1 | MEMOP_ENCODE(dst, base_reg, 0, 0, seg) )
#define LDZX_DSZ64_ASZ64_SC1_DRR(dst, base_reg, index_reg, seg) ( _LDZX_DSZ64_ASZ64_SC1 | MEMOP_ENCODE(dst, base_reg, index_reg, 0, seg) )
#define LDZX_DSZ64_ASZ64_SC1_DRI(dst, base_reg, offset, seg) ( _LDZX_DSZ64_ASZ64_SC1 | MEMOP_ENCODE(dst, base_reg, 0, offset, seg) )
#define LDZX_DSZ64_ASZ64_SC1_DRRI(dst, base_reg, index_reg, offset, seg) ( _LDZX_DSZ64_ASZ64_SC1 | MEMOP_ENCODE(dst, base_reg, index_reg, offset, seg) )
#define LDZX_DSZ64_ASZ64_SC4_DR(dst, base_reg, seg) ( _LDZX_DSZ64_ASZ64_SC4 | MEMOP_ENCODE(dst, base_reg, 0, 0, seg) )
#define LDZX_DSZ64_ASZ64_SC4_DRR(dst, base_reg, index_reg, seg) ( _LDZX_DSZ64_ASZ64_SC4 | MEMOP_ENCODE(dst, base_reg, index_reg, 0, seg) )
#define LDZX_DSZ64_ASZ64_SC4_DRI(dst, base_reg, offset, seg) ( _LDZX_DSZ64_ASZ64_SC4 | MEMOP_ENCODE(dst, base_reg, 0, offset, seg) )
#define LDZX_DSZ64_ASZ64_SC4_DRRI(dst, base_reg, index_reg, offset, seg) ( _LDZX_DSZ64_ASZ64_SC4 | MEMOP_ENCODE(dst, base_reg, index_reg, offset, seg) )
#define LDZX_DSZ64_ASZ64_SC8_DR(dst, base_reg, seg) ( _LDZX_DSZ64_ASZ64_SC8 | MEMOP_ENCODE(dst, base_reg, 0, 0, seg) )
#define LDZX_DSZ64_ASZ64_SC8_DRR(dst, base_reg, index_reg, seg) ( _LDZX_DSZ64_ASZ64_SC8 | MEMOP_ENCODE(dst, base_reg, index_reg, 0, seg) )
#define LDZX_DSZ64_ASZ64_SC8_DRI(dst, base_reg, offset, seg) ( _LDZX_DSZ64_ASZ64_SC8 | MEMOP_ENCODE(dst, base_reg, 0, offset, seg) )
#define LDZX_DSZ64_ASZ64_SC8_DRRI(dst, base_reg, index_reg, offset, seg) ( _LDZX_DSZ64_ASZ64_SC8 | MEMOP_ENCODE(dst, base_reg, index_reg, offset, seg) )
#define LDZX_DSZ64_ASZ32_SC1_DR(dst, base_reg, seg) ( _LDZX_DSZ64_ASZ32_SC1 | MEMOP_ENCODE(dst, base_reg, 0, 0, seg) )
#define LDZX_DSZ64_ASZ32_SC1_DRR(dst, base_reg, index_reg, seg) ( _LDZX_DSZ64_ASZ32_SC1 | MEMOP_ENCODE(dst, base_reg, index_reg, 0, seg) )
#define LDZX_DSZ64_ASZ32_SC1_DRI(dst, base_reg, offset, seg) ( _LDZX_DSZ64_ASZ32_SC1 | MEMOP_ENCODE(dst, base_reg, 0, offset, seg) )
#define LDZX_DSZ64_ASZ32_SC1_DRRI(dst, base_reg, index_reg, offset, seg) ( _LDZX_DSZ64_ASZ32_SC1 | MEMOP_ENCODE(dst, base_reg, index_reg, offset, seg) )
#define LDZX_DSZ64_ASZ32_SC4_DR(dst, base_reg, seg) ( _LDZX_DSZ64_ASZ32_SC4 | MEMOP_ENCODE(dst, base_reg, 0, 0, seg) )
#define LDZX_DSZ64_ASZ32_SC4_DRR(dst, base_reg, index_reg, seg) ( _LDZX_DSZ64_ASZ32_SC4 | MEMOP_ENCODE(dst, base_reg, index_reg, 0, seg) )
#define LDZX_DSZ64_ASZ32_SC4_DRI(dst, base_reg, offset, seg) ( _LDZX_DSZ64_ASZ32_SC4 | MEMOP_ENCODE(dst, base_reg, 0, offset, seg) )
#define LDZX_DSZ64_ASZ32_SC4_DRRI(dst, base_reg, index_reg, offset, seg) ( _LDZX_DSZ64_ASZ32_SC4 | MEMOP_ENCODE(dst, base_reg, index_reg, offset, seg) )
#define LDZX_DSZ64_ASZ32_SC8_DR(dst, base_reg, seg) ( _LDZX_DSZ64_ASZ32_SC8 | MEMOP_ENCODE(dst, base_reg, 0, 0, seg) )
#define LDZX_DSZ64_ASZ32_SC8_DRR(dst, base_reg, index_reg, seg) ( _LDZX_DSZ64_ASZ32_SC8 | MEMOP_ENCODE(dst, base_reg, index_reg, 0, seg) )
#define LDZX_DSZ64_ASZ32_SC8_DRI(dst, base_reg, offset, seg) ( _LDZX_DSZ64_ASZ32_SC8 | MEMOP_ENCODE(dst, base_reg, 0, offset, seg) )
#define LDZX_DSZ64_ASZ32_SC8_DRRI(dst, base_reg, index_reg, offset, seg) ( _LDZX_DSZ64_ASZ32_SC8 | MEMOP_ENCODE(dst, base_reg, index_reg, offset, seg) )
#define LDZX_DSZ64_ASZ16_SC1_DR(dst, base_reg, seg) ( _LDZX_DSZ64_ASZ16_SC1 | MEMOP_ENCODE(dst, base_reg, 0, 0, seg) )
#define LDZX_DSZ64_ASZ16_SC1_DRR(dst, base_reg, index_reg, seg) ( _LDZX_DSZ64_ASZ16_SC1 | MEMOP_ENCODE(dst, base_reg, index_reg, 0, seg) )
#define LDZX_DSZ64_ASZ16_SC1_DRI(dst, base_reg, offset, seg) ( _LDZX_DSZ64_ASZ16_SC1 | MEMOP_ENCODE(dst, base_reg, 0, offset, seg) )
#define LDZX_DSZ64_ASZ16_SC1_DRRI(dst, base_reg, index_reg, offset, seg) ( _LDZX_DSZ64_ASZ16_SC1 | MEMOP_ENCODE(dst, base_reg, index_reg, offset, seg) )
#define LDZX_DSZ64_ASZ16_SC4_DR(dst, base_reg, seg) ( _LDZX_DSZ64_ASZ16_SC4 | MEMOP_ENCODE(dst, base_reg, 0, 0, seg) )
#define LDZX_DSZ64_ASZ16_SC4_DRR(dst, base_reg, index_reg, seg) ( _LDZX_DSZ64_ASZ16_SC4 | MEMOP_ENCODE(dst, base_reg, index_reg, 0, seg) )
#define LDZX_DSZ64_ASZ16_SC4_DRI(dst, base_reg, offset, seg) ( _LDZX_DSZ64_ASZ16_SC4 | MEMOP_ENCODE(dst, base_reg, 0, offset, seg) )
#define LDZX_DSZ64_ASZ16_SC4_DRRI(dst, base_reg, index_reg, offset, seg) ( _LDZX_DSZ64_ASZ16_SC4 | MEMOP_ENCODE(dst, base_reg, index_reg, offset, seg) )
#define LDZX_DSZ64_ASZ16_SC8_DR(dst, base_reg, seg) ( _LDZX_DSZ64_ASZ16_SC8 | MEMOP_ENCODE(dst, base_reg, 0, 0, seg) )
#define LDZX_DSZ64_ASZ16_SC8_DRR(dst, base_reg, index_reg, seg) ( _LDZX_DSZ64_ASZ16_SC8 | MEMOP_ENCODE(dst, base_reg, index_reg, 0, seg) )
#define LDZX_DSZ64_ASZ16_SC8_DRI(dst, base_reg, offset, seg) ( _LDZX_DSZ64_ASZ16_SC8 | MEMOP_ENCODE(dst, base_reg, 0, offset, seg) )
#define LDZX_DSZ64_ASZ16_SC8_DRRI(dst, base_reg, index_reg, offset, seg) ( _LDZX_DSZ64_ASZ16_SC8 | MEMOP_ENCODE(dst, base_reg, index_reg, offset, seg) )
/** @} */
/** \defgroup STAD
 *  @{
 */
#define STAD_DSZ8_ASZ64_SC1_RR(src, base_reg, seg) ( _STAD_DSZ8_ASZ64_SC1 | MEMOP_ENCODE(src, base_reg, 0, 0, seg) )
#define STAD_DSZ8_ASZ64_SC1_RRR(src, base_reg, index_reg, seg) ( _STAD_DSZ8_ASZ64_SC1 | MEMOP_ENCODE(src, base_reg, index_reg, 0, seg) )
#define STAD_DSZ8_ASZ64_SC1_RRI(src, base_reg, offset, seg) ( _STAD_DSZ8_ASZ64_SC1 | MEMOP_ENCODE(src, base_reg, 0, offset, seg) )
#define STAD_DSZ8_ASZ64_SC1_RRRI(src, base_reg, index_reg, offset, seg) ( _STAD_DSZ8_ASZ64_SC1 | MEMOP_ENCODE(src, base_reg, index_reg, offset, seg) )
#define STAD_DSZ8_ASZ64_SC4_RR(src, base_reg, seg) ( _STAD_DSZ8_ASZ64_SC4 | MEMOP_ENCODE(src, base_reg, 0, 0, seg) )
#define STAD_DSZ8_ASZ64_SC4_RRR(src, base_reg, index_reg, seg) ( _STAD_DSZ8_ASZ64_SC4 | MEMOP_ENCODE(src, base_reg, index_reg, 0, seg) )
#define STAD_DSZ8_ASZ64_SC4_RRI(src, base_reg, offset, seg) ( _STAD_DSZ8_ASZ64_SC4 | MEMOP_ENCODE(src, base_reg, 0, offset, seg) )
#define STAD_DSZ8_ASZ64_SC4_RRRI(src, base_reg, index_reg, offset, seg) ( _STAD_DSZ8_ASZ64_SC4 | MEMOP_ENCODE(src, base_reg, index_reg, offset, seg) )
#define STAD_DSZ8_ASZ64_SC8_RR(src, base_reg, seg) ( _STAD_DSZ8_ASZ64_SC8 | MEMOP_ENCODE(src, base_reg, 0, 0, seg) )
#define STAD_DSZ8_ASZ64_SC8_RRR(src, base_reg, index_reg, seg) ( _STAD_DSZ8_ASZ64_SC8 | MEMOP_ENCODE(src, base_reg, index_reg, 0, seg) )
#define STAD_DSZ8_ASZ64_SC8_RRI(src, base_reg, offset, seg) ( _STAD_DSZ8_ASZ64_SC8 | MEMOP_ENCODE(src, base_reg, 0, offset, seg) )
#define STAD_DSZ8_ASZ64_SC8_RRRI(src, base_reg, index_reg, offset, seg) ( _STAD_DSZ8_ASZ64_SC8 | MEMOP_ENCODE(src, base_reg, index_reg, offset, seg) )
#define STAD_DSZ8_ASZ32_SC1_RR(src, base_reg, seg) ( _STAD_DSZ8_ASZ32_SC1 | MEMOP_ENCODE(src, base_reg, 0, 0, seg) )
#define STAD_DSZ8_ASZ32_SC1_RRR(src, base_reg, index_reg, seg) ( _STAD_DSZ8_ASZ32_SC1 | MEMOP_ENCODE(src, base_reg, index_reg, 0, seg) )
#define STAD_DSZ8_ASZ32_SC1_RRI(src, base_reg, offset, seg) ( _STAD_DSZ8_ASZ32_SC1 | MEMOP_ENCODE(src, base_reg, 0, offset, seg) )
#define STAD_DSZ8_ASZ32_SC1_RRRI(src, base_reg, index_reg, offset, seg) ( _STAD_DSZ8_ASZ32_SC1 | MEMOP_ENCODE(src, base_reg, index_reg, offset, seg) )
#define STAD_DSZ8_ASZ32_SC4_RR(src, base_reg, seg) ( _STAD_DSZ8_ASZ32_SC4 | MEMOP_ENCODE(src, base_reg, 0, 0, seg) )
#define STAD_DSZ8_ASZ32_SC4_RRR(src, base_reg, index_reg, seg) ( _STAD_DSZ8_ASZ32_SC4 | MEMOP_ENCODE(src, base_reg, index_reg, 0, seg) )
#define STAD_DSZ8_ASZ32_SC4_RRI(src, base_reg, offset, seg) ( _STAD_DSZ8_ASZ32_SC4 | MEMOP_ENCODE(src, base_reg, 0, offset, seg) )
#define STAD_DSZ8_ASZ32_SC4_RRRI(src, base_reg, index_reg, offset, seg) ( _STAD_DSZ8_ASZ32_SC4 | MEMOP_ENCODE(src, base_reg, index_reg, offset, seg) )
#define STAD_DSZ8_ASZ32_SC8_RR(src, base_reg, seg) ( _STAD_DSZ8_ASZ32_SC8 | MEMOP_ENCODE(src, base_reg, 0, 0, seg) )
#define STAD_DSZ8_ASZ32_SC8_RRR(src, base_reg, index_reg, seg) ( _STAD_DSZ8_ASZ32_SC8 | MEMOP_ENCODE(src, base_reg, index_reg, 0, seg) )
#define STAD_DSZ8_ASZ32_SC8_RRI(src, base_reg, offset, seg) ( _STAD_DSZ8_ASZ32_SC8 | MEMOP_ENCODE(src, base_reg, 0, offset, seg) )
#define STAD_DSZ8_ASZ32_SC8_RRRI(src, base_reg, index_reg, offset, seg) ( _STAD_DSZ8_ASZ32_SC8 | MEMOP_ENCODE(src, base_reg, index_reg, offset, seg) )
#define STAD_DSZ8_ASZ16_SC1_RR(src, base_reg, seg) ( _STAD_DSZ8_ASZ16_SC1 | MEMOP_ENCODE(src, base_reg, 0, 0, seg) )
#define STAD_DSZ8_ASZ16_SC1_RRR(src, base_reg, index_reg, seg) ( _STAD_DSZ8_ASZ16_SC1 | MEMOP_ENCODE(src, base_reg, index_reg, 0, seg) )
#define STAD_DSZ8_ASZ16_SC1_RRI(src, base_reg, offset, seg) ( _STAD_DSZ8_ASZ16_SC1 | MEMOP_ENCODE(src, base_reg, 0, offset, seg) )
#define STAD_DSZ8_ASZ16_SC1_RRRI(src, base_reg, index_reg, offset, seg) ( _STAD_DSZ8_ASZ16_SC1 | MEMOP_ENCODE(src, base_reg, index_reg, offset, seg) )
#define STAD_DSZ8_ASZ16_SC4_RR(src, base_reg, seg) ( _STAD_DSZ8_ASZ16_SC4 | MEMOP_ENCODE(src, base_reg, 0, 0, seg) )
#define STAD_DSZ8_ASZ16_SC4_RRR(src, base_reg, index_reg, seg) ( _STAD_DSZ8_ASZ16_SC4 | MEMOP_ENCODE(src, base_reg, index_reg, 0, seg) )
#define STAD_DSZ8_ASZ16_SC4_RRI(src, base_reg, offset, seg) ( _STAD_DSZ8_ASZ16_SC4 | MEMOP_ENCODE(src, base_reg, 0, offset, seg) )
#define STAD_DSZ8_ASZ16_SC4_RRRI(src, base_reg, index_reg, offset, seg) ( _STAD_DSZ8_ASZ16_SC4 | MEMOP_ENCODE(src, base_reg, index_reg, offset, seg) )
#define STAD_DSZ8_ASZ16_SC8_RR(src, base_reg, seg) ( _STAD_DSZ8_ASZ16_SC8 | MEMOP_ENCODE(src, base_reg, 0, 0, seg) )
#define STAD_DSZ8_ASZ16_SC8_RRR(src, base_reg, index_reg, seg) ( _STAD_DSZ8_ASZ16_SC8 | MEMOP_ENCODE(src, base_reg, index_reg, 0, seg) )
#define STAD_DSZ8_ASZ16_SC8_RRI(src, base_reg, offset, seg) ( _STAD_DSZ8_ASZ16_SC8 | MEMOP_ENCODE(src, base_reg, 0, offset, seg) )
#define STAD_DSZ8_ASZ16_SC8_RRRI(src, base_reg, index_reg, offset, seg) ( _STAD_DSZ8_ASZ16_SC8 | MEMOP_ENCODE(src, base_reg, index_reg, offset, seg) )
#define STAD_DSZ16_ASZ64_SC1_RR(src, base_reg, seg) ( _STAD_DSZ16_ASZ64_SC1 | MEMOP_ENCODE(src, base_reg, 0, 0, seg) )
#define STAD_DSZ16_ASZ64_SC1_RRR(src, base_reg, index_reg, seg) ( _STAD_DSZ16_ASZ64_SC1 | MEMOP_ENCODE(src, base_reg, index_reg, 0, seg) )
#define STAD_DSZ16_ASZ64_SC1_RRI(src, base_reg, offset, seg) ( _STAD_DSZ16_ASZ64_SC1 | MEMOP_ENCODE(src, base_reg, 0, offset, seg) )
#define STAD_DSZ16_ASZ64_SC1_RRRI(src, base_reg, index_reg, offset, seg) ( _STAD_DSZ16_ASZ64_SC1 | MEMOP_ENCODE(src, base_reg, index_reg, offset, seg) )
#define STAD_DSZ16_ASZ64_SC4_RR(src, base_reg, seg) ( _STAD_DSZ16_ASZ64_SC4 | MEMOP_ENCODE(src, base_reg, 0, 0, seg) )
#define STAD_DSZ16_ASZ64_SC4_RRR(src, base_reg, index_reg, seg) ( _STAD_DSZ16_ASZ64_SC4 | MEMOP_ENCODE(src, base_reg, index_reg, 0, seg) )
#define STAD_DSZ16_ASZ64_SC4_RRI(src, base_reg, offset, seg) ( _STAD_DSZ16_ASZ64_SC4 | MEMOP_ENCODE(src, base_reg, 0, offset, seg) )
#define STAD_DSZ16_ASZ64_SC4_RRRI(src, base_reg, index_reg, offset, seg) ( _STAD_DSZ16_ASZ64_SC4 | MEMOP_ENCODE(src, base_reg, index_reg, offset, seg) )
#define STAD_DSZ16_ASZ64_SC8_RR(src, base_reg, seg) ( _STAD_DSZ16_ASZ64_SC8 | MEMOP_ENCODE(src, base_reg, 0, 0, seg) )
#define STAD_DSZ16_ASZ64_SC8_RRR(src, base_reg, index_reg, seg) ( _STAD_DSZ16_ASZ64_SC8 | MEMOP_ENCODE(src, base_reg, index_reg, 0, seg) )
#define STAD_DSZ16_ASZ64_SC8_RRI(src, base_reg, offset, seg) ( _STAD_DSZ16_ASZ64_SC8 | MEMOP_ENCODE(src, base_reg, 0, offset, seg) )
#define STAD_DSZ16_ASZ64_SC8_RRRI(src, base_reg, index_reg, offset, seg) ( _STAD_DSZ16_ASZ64_SC8 | MEMOP_ENCODE(src, base_reg, index_reg, offset, seg) )
#define STAD_DSZ16_ASZ32_SC1_RR(src, base_reg, seg) ( _STAD_DSZ16_ASZ32_SC1 | MEMOP_ENCODE(src, base_reg, 0, 0, seg) )
#define STAD_DSZ16_ASZ32_SC1_RRR(src, base_reg, index_reg, seg) ( _STAD_DSZ16_ASZ32_SC1 | MEMOP_ENCODE(src, base_reg, index_reg, 0, seg) )
#define STAD_DSZ16_ASZ32_SC1_RRI(src, base_reg, offset, seg) ( _STAD_DSZ16_ASZ32_SC1 | MEMOP_ENCODE(src, base_reg, 0, offset, seg) )
#define STAD_DSZ16_ASZ32_SC1_RRRI(src, base_reg, index_reg, offset, seg) ( _STAD_DSZ16_ASZ32_SC1 | MEMOP_ENCODE(src, base_reg, index_reg, offset, seg) )
#define STAD_DSZ16_ASZ32_SC4_RR(src, base_reg, seg) ( _STAD_DSZ16_ASZ32_SC4 | MEMOP_ENCODE(src, base_reg, 0, 0, seg) )
#define STAD_DSZ16_ASZ32_SC4_RRR(src, base_reg, index_reg, seg) ( _STAD_DSZ16_ASZ32_SC4 | MEMOP_ENCODE(src, base_reg, index_reg, 0, seg) )
#define STAD_DSZ16_ASZ32_SC4_RRI(src, base_reg, offset, seg) ( _STAD_DSZ16_ASZ32_SC4 | MEMOP_ENCODE(src, base_reg, 0, offset, seg) )
#define STAD_DSZ16_ASZ32_SC4_RRRI(src, base_reg, index_reg, offset, seg) ( _STAD_DSZ16_ASZ32_SC4 | MEMOP_ENCODE(src, base_reg, index_reg, offset, seg) )
#define STAD_DSZ16_ASZ32_SC8_RR(src, base_reg, seg) ( _STAD_DSZ16_ASZ32_SC8 | MEMOP_ENCODE(src, base_reg, 0, 0, seg) )
#define STAD_DSZ16_ASZ32_SC8_RRR(src, base_reg, index_reg, seg) ( _STAD_DSZ16_ASZ32_SC8 | MEMOP_ENCODE(src, base_reg, index_reg, 0, seg) )
#define STAD_DSZ16_ASZ32_SC8_RRI(src, base_reg, offset, seg) ( _STAD_DSZ16_ASZ32_SC8 | MEMOP_ENCODE(src, base_reg, 0, offset, seg) )
#define STAD_DSZ16_ASZ32_SC8_RRRI(src, base_reg, index_reg, offset, seg) ( _STAD_DSZ16_ASZ32_SC8 | MEMOP_ENCODE(src, base_reg, index_reg, offset, seg) )
#define STAD_DSZ16_ASZ16_SC1_RR(src, base_reg, seg) ( _STAD_DSZ16_ASZ16_SC1 | MEMOP_ENCODE(src, base_reg, 0, 0, seg) )
#define STAD_DSZ16_ASZ16_SC1_RRR(src, base_reg, index_reg, seg) ( _STAD_DSZ16_ASZ16_SC1 | MEMOP_ENCODE(src, base_reg, index_reg, 0, seg) )
#define STAD_DSZ16_ASZ16_SC1_RRI(src, base_reg, offset, seg) ( _STAD_DSZ16_ASZ16_SC1 | MEMOP_ENCODE(src, base_reg, 0, offset, seg) )
#define STAD_DSZ16_ASZ16_SC1_RRRI(src, base_reg, index_reg, offset, seg) ( _STAD_DSZ16_ASZ16_SC1 | MEMOP_ENCODE(src, base_reg, index_reg, offset, seg) )
#define STAD_DSZ16_ASZ16_SC4_RR(src, base_reg, seg) ( _STAD_DSZ16_ASZ16_SC4 | MEMOP_ENCODE(src, base_reg, 0, 0, seg) )
#define STAD_DSZ16_ASZ16_SC4_RRR(src, base_reg, index_reg, seg) ( _STAD_DSZ16_ASZ16_SC4 | MEMOP_ENCODE(src, base_reg, index_reg, 0, seg) )
#define STAD_DSZ16_ASZ16_SC4_RRI(src, base_reg, offset, seg) ( _STAD_DSZ16_ASZ16_SC4 | MEMOP_ENCODE(src, base_reg, 0, offset, seg) )
#define STAD_DSZ16_ASZ16_SC4_RRRI(src, base_reg, index_reg, offset, seg) ( _STAD_DSZ16_ASZ16_SC4 | MEMOP_ENCODE(src, base_reg, index_reg, offset, seg) )
#define STAD_DSZ16_ASZ16_SC8_RR(src, base_reg, seg) ( _STAD_DSZ16_ASZ16_SC8 | MEMOP_ENCODE(src, base_reg, 0, 0, seg) )
#define STAD_DSZ16_ASZ16_SC8_RRR(src, base_reg, index_reg, seg) ( _STAD_DSZ16_ASZ16_SC8 | MEMOP_ENCODE(src, base_reg, index_reg, 0, seg) )
#define STAD_DSZ16_ASZ16_SC8_RRI(src, base_reg, offset, seg) ( _STAD_DSZ16_ASZ16_SC8 | MEMOP_ENCODE(src, base_reg, 0, offset, seg) )
#define STAD_DSZ16_ASZ16_SC8_RRRI(src, base_reg, index_reg, offset, seg) ( _STAD_DSZ16_ASZ16_SC8 | MEMOP_ENCODE(src, base_reg, index_reg, offset, seg) )
#define STAD_DSZ32_ASZ64_SC1_RR(src, base_reg, seg) ( _STAD_DSZ32_ASZ64_SC1 | MEMOP_ENCODE(src, base_reg, 0, 0, seg) )
#define STAD_DSZ32_ASZ64_SC1_RRR(src, base_reg, index_reg, seg) ( _STAD_DSZ32_ASZ64_SC1 | MEMOP_ENCODE(src, base_reg, index_reg, 0, seg) )
#define STAD_DSZ32_ASZ64_SC1_RRI(src, base_reg, offset, seg) ( _STAD_DSZ32_ASZ64_SC1 | MEMOP_ENCODE(src, base_reg, 0, offset, seg) )
#define STAD_DSZ32_ASZ64_SC1_RRRI(src, base_reg, index_reg, offset, seg) ( _STAD_DSZ32_ASZ64_SC1 | MEMOP_ENCODE(src, base_reg, index_reg, offset, seg) )
#define STAD_DSZ32_ASZ64_SC4_RR(src, base_reg, seg) ( _STAD_DSZ32_ASZ64_SC4 | MEMOP_ENCODE(src, base_reg, 0, 0, seg) )
#define STAD_DSZ32_ASZ64_SC4_RRR(src, base_reg, index_reg, seg) ( _STAD_DSZ32_ASZ64_SC4 | MEMOP_ENCODE(src, base_reg, index_reg, 0, seg) )
#define STAD_DSZ32_ASZ64_SC4_RRI(src, base_reg, offset, seg) ( _STAD_DSZ32_ASZ64_SC4 | MEMOP_ENCODE(src, base_reg, 0, offset, seg) )
#define STAD_DSZ32_ASZ64_SC4_RRRI(src, base_reg, index_reg, offset, seg) ( _STAD_DSZ32_ASZ64_SC4 | MEMOP_ENCODE(src, base_reg, index_reg, offset, seg) )
#define STAD_DSZ32_ASZ64_SC8_RR(src, base_reg, seg) ( _STAD_DSZ32_ASZ64_SC8 | MEMOP_ENCODE(src, base_reg, 0, 0, seg) )
#define STAD_DSZ32_ASZ64_SC8_RRR(src, base_reg, index_reg, seg) ( _STAD_DSZ32_ASZ64_SC8 | MEMOP_ENCODE(src, base_reg, index_reg, 0, seg) )
#define STAD_DSZ32_ASZ64_SC8_RRI(src, base_reg, offset, seg) ( _STAD_DSZ32_ASZ64_SC8 | MEMOP_ENCODE(src, base_reg, 0, offset, seg) )
#define STAD_DSZ32_ASZ64_SC8_RRRI(src, base_reg, index_reg, offset, seg) ( _STAD_DSZ32_ASZ64_SC8 | MEMOP_ENCODE(src, base_reg, index_reg, offset, seg) )
#define STAD_DSZ32_ASZ32_SC1_RR(src, base_reg, seg) ( _STAD_DSZ32_ASZ32_SC1 | MEMOP_ENCODE(src, base_reg, 0, 0, seg) )
#define STAD_DSZ32_ASZ32_SC1_RRR(src, base_reg, index_reg, seg) ( _STAD_DSZ32_ASZ32_SC1 | MEMOP_ENCODE(src, base_reg, index_reg, 0, seg) )
#define STAD_DSZ32_ASZ32_SC1_RRI(src, base_reg, offset, seg) ( _STAD_DSZ32_ASZ32_SC1 | MEMOP_ENCODE(src, base_reg, 0, offset, seg) )
#define STAD_DSZ32_ASZ32_SC1_RRRI(src, base_reg, index_reg, offset, seg) ( _STAD_DSZ32_ASZ32_SC1 | MEMOP_ENCODE(src, base_reg, index_reg, offset, seg) )
#define STAD_DSZ32_ASZ32_SC4_RR(src, base_reg, seg) ( _STAD_DSZ32_ASZ32_SC4 | MEMOP_ENCODE(src, base_reg, 0, 0, seg) )
#define STAD_DSZ32_ASZ32_SC4_RRR(src, base_reg, index_reg, seg) ( _STAD_DSZ32_ASZ32_SC4 | MEMOP_ENCODE(src, base_reg, index_reg, 0, seg) )
#define STAD_DSZ32_ASZ32_SC4_RRI(src, base_reg, offset, seg) ( _STAD_DSZ32_ASZ32_SC4 | MEMOP_ENCODE(src, base_reg, 0, offset, seg) )
#define STAD_DSZ32_ASZ32_SC4_RRRI(src, base_reg, index_reg, offset, seg) ( _STAD_DSZ32_ASZ32_SC4 | MEMOP_ENCODE(src, base_reg, index_reg, offset, seg) )
#define STAD_DSZ32_ASZ32_SC8_RR(src, base_reg, seg) ( _STAD_DSZ32_ASZ32_SC8 | MEMOP_ENCODE(src, base_reg, 0, 0, seg) )
#define STAD_DSZ32_ASZ32_SC8_RRR(src, base_reg, index_reg, seg) ( _STAD_DSZ32_ASZ32_SC8 | MEMOP_ENCODE(src, base_reg, index_reg, 0, seg) )
#define STAD_DSZ32_ASZ32_SC8_RRI(src, base_reg, offset, seg) ( _STAD_DSZ32_ASZ32_SC8 | MEMOP_ENCODE(src, base_reg, 0, offset, seg) )
#define STAD_DSZ32_ASZ32_SC8_RRRI(src, base_reg, index_reg, offset, seg) ( _STAD_DSZ32_ASZ32_SC8 | MEMOP_ENCODE(src, base_reg, index_reg, offset, seg) )
#define STAD_DSZ32_ASZ16_SC1_RR(src, base_reg, seg) ( _STAD_DSZ32_ASZ16_SC1 | MEMOP_ENCODE(src, base_reg, 0, 0, seg) )
#define STAD_DSZ32_ASZ16_SC1_RRR(src, base_reg, index_reg, seg) ( _STAD_DSZ32_ASZ16_SC1 | MEMOP_ENCODE(src, base_reg, index_reg, 0, seg) )
#define STAD_DSZ32_ASZ16_SC1_RRI(src, base_reg, offset, seg) ( _STAD_DSZ32_ASZ16_SC1 | MEMOP_ENCODE(src, base_reg, 0, offset, seg) )
#define STAD_DSZ32_ASZ16_SC1_RRRI(src, base_reg, index_reg, offset, seg) ( _STAD_DSZ32_ASZ16_SC1 | MEMOP_ENCODE(src, base_reg, index_reg, offset, seg) )
#define STAD_DSZ32_ASZ16_SC4_RR(src, base_reg, seg) ( _STAD_DSZ32_ASZ16_SC4 | MEMOP_ENCODE(src, base_reg, 0, 0, seg) )
#define STAD_DSZ32_ASZ16_SC4_RRR(src, base_reg, index_reg, seg) ( _STAD_DSZ32_ASZ16_SC4 | MEMOP_ENCODE(src, base_reg, index_reg, 0, seg) )
#define STAD_DSZ32_ASZ16_SC4_RRI(src, base_reg, offset, seg) ( _STAD_DSZ32_ASZ16_SC4 | MEMOP_ENCODE(src, base_reg, 0, offset, seg) )
#define STAD_DSZ32_ASZ16_SC4_RRRI(src, base_reg, index_reg, offset, seg) ( _STAD_DSZ32_ASZ16_SC4 | MEMOP_ENCODE(src, base_reg, index_reg, offset, seg) )
#define STAD_DSZ32_ASZ16_SC8_RR(src, base_reg, seg) ( _STAD_DSZ32_ASZ16_SC8 | MEMOP_ENCODE(src, base_reg, 0, 0, seg) )
#define STAD_DSZ32_ASZ16_SC8_RRR(src, base_reg, index_reg, seg) ( _STAD_DSZ32_ASZ16_SC8 | MEMOP_ENCODE(src, base_reg, index_reg, 0, seg) )
#define STAD_DSZ32_ASZ16_SC8_RRI(src, base_reg, offset, seg) ( _STAD_DSZ32_ASZ16_SC8 | MEMOP_ENCODE(src, base_reg, 0, offset, seg) )
#define STAD_DSZ32_ASZ16_SC8_RRRI(src, base_reg, index_reg, offset, seg) ( _STAD_DSZ32_ASZ16_SC8 | MEMOP_ENCODE(src, base_reg, index_reg, offset, seg) )
#define STAD_DSZ64_ASZ64_SC1_RR(src, base_reg, seg) ( _STAD_DSZ64_ASZ64_SC1 | MEMOP_ENCODE(src, base_reg, 0, 0, seg) )
#define STAD_DSZ64_ASZ64_SC1_RRR(src, base_reg, index_reg, seg) ( _STAD_DSZ64_ASZ64_SC1 | MEMOP_ENCODE(src, base_reg, index_reg, 0, seg) )
#define STAD_DSZ64_ASZ64_SC1_RRI(src, base_reg, offset, seg) ( _STAD_DSZ64_ASZ64_SC1 | MEMOP_ENCODE(src, base_reg, 0, offset, seg) )
#define STAD_DSZ64_ASZ64_SC1_RRRI(src, base_reg, index_reg, offset, seg) ( _STAD_DSZ64_ASZ64_SC1 | MEMOP_ENCODE(src, base_reg, index_reg, offset, seg) )
#define STAD_DSZ64_ASZ64_SC4_RR(src, base_reg, seg) ( _STAD_DSZ64_ASZ64_SC4 | MEMOP_ENCODE(src, base_reg, 0, 0, seg) )
#define STAD_DSZ64_ASZ64_SC4_RRR(src, base_reg, index_reg, seg) ( _STAD_DSZ64_ASZ64_SC4 | MEMOP_ENCODE(src, base_reg, index_reg, 0, seg) )
#define STAD_DSZ64_ASZ64_SC4_RRI(src, base_reg, offset, seg) ( _STAD_DSZ64_ASZ64_SC4 | MEMOP_ENCODE(src, base_reg, 0, offset, seg) )
#define STAD_DSZ64_ASZ64_SC4_RRRI(src, base_reg, index_reg, offset, seg) ( _STAD_DSZ64_ASZ64_SC4 | MEMOP_ENCODE(src, base_reg, index_reg, offset, seg) )
#define STAD_DSZ64_ASZ64_SC8_RR(src, base_reg, seg) ( _STAD_DSZ64_ASZ64_SC8 | MEMOP_ENCODE(src, base_reg, 0, 0, seg) )
#define STAD_DSZ64_ASZ64_SC8_RRR(src, base_reg, index_reg, seg) ( _STAD_DSZ64_ASZ64_SC8 | MEMOP_ENCODE(src, base_reg, index_reg, 0, seg) )
#define STAD_DSZ64_ASZ64_SC8_RRI(src, base_reg, offset, seg) ( _STAD_DSZ64_ASZ64_SC8 | MEMOP_ENCODE(src, base_reg, 0, offset, seg) )
#define STAD_DSZ64_ASZ64_SC8_RRRI(src, base_reg, index_reg, offset, seg) ( _STAD_DSZ64_ASZ64_SC8 | MEMOP_ENCODE(src, base_reg, index_reg, offset, seg) )
#define STAD_DSZ64_ASZ32_SC1_RR(src, base_reg, seg) ( _STAD_DSZ64_ASZ32_SC1 | MEMOP_ENCODE(src, base_reg, 0, 0, seg) )
#define STAD_DSZ64_ASZ32_SC1_RRR(src, base_reg, index_reg, seg) ( _STAD_DSZ64_ASZ32_SC1 | MEMOP_ENCODE(src, base_reg, index_reg, 0, seg) )
#define STAD_DSZ64_ASZ32_SC1_RRI(src, base_reg, offset, seg) ( _STAD_DSZ64_ASZ32_SC1 | MEMOP_ENCODE(src, base_reg, 0, offset, seg) )
#define STAD_DSZ64_ASZ32_SC1_RRRI(src, base_reg, index_reg, offset, seg) ( _STAD_DSZ64_ASZ32_SC1 | MEMOP_ENCODE(src, base_reg, index_reg, offset, seg) )
#define STAD_DSZ64_ASZ32_SC4_RR(src, base_reg, seg) ( _STAD_DSZ64_ASZ32_SC4 | MEMOP_ENCODE(src, base_reg, 0, 0, seg) )
#define STAD_DSZ64_ASZ32_SC4_RRR(src, base_reg, index_reg, seg) ( _STAD_DSZ64_ASZ32_SC4 | MEMOP_ENCODE(src, base_reg, index_reg, 0, seg) )
#define STAD_DSZ64_ASZ32_SC4_RRI(src, base_reg, offset, seg) ( _STAD_DSZ64_ASZ32_SC4 | MEMOP_ENCODE(src, base_reg, 0, offset, seg) )
#define STAD_DSZ64_ASZ32_SC4_RRRI(src, base_reg, index_reg, offset, seg) ( _STAD_DSZ64_ASZ32_SC4 | MEMOP_ENCODE(src, base_reg, index_reg, offset, seg) )
#define STAD_DSZ64_ASZ32_SC8_RR(src, base_reg, seg) ( _STAD_DSZ64_ASZ32_SC8 | MEMOP_ENCODE(src, base_reg, 0, 0, seg) )
#define STAD_DSZ64_ASZ32_SC8_RRR(src, base_reg, index_reg, seg) ( _STAD_DSZ64_ASZ32_SC8 | MEMOP_ENCODE(src, base_reg, index_reg, 0, seg) )
#define STAD_DSZ64_ASZ32_SC8_RRI(src, base_reg, offset, seg) ( _STAD_DSZ64_ASZ32_SC8 | MEMOP_ENCODE(src, base_reg, 0, offset, seg) )
#define STAD_DSZ64_ASZ32_SC8_RRRI(src, base_reg, index_reg, offset, seg) ( _STAD_DSZ64_ASZ32_SC8 | MEMOP_ENCODE(src, base_reg, index_reg, offset, seg) )
#define STAD_DSZ64_ASZ16_SC1_RR(src, base_reg, seg) ( _STAD_DSZ64_ASZ16_SC1 | MEMOP_ENCODE(src, base_reg, 0, 0, seg) )
#define STAD_DSZ64_ASZ16_SC1_RRR(src, base_reg, index_reg, seg) ( _STAD_DSZ64_ASZ16_SC1 | MEMOP_ENCODE(src, base_reg, index_reg, 0, seg) )
#define STAD_DSZ64_ASZ16_SC1_RRI(src, base_reg, offset, seg) ( _STAD_DSZ64_ASZ16_SC1 | MEMOP_ENCODE(src, base_reg, 0, offset, seg) )
#define STAD_DSZ64_ASZ16_SC1_RRRI(src, base_reg, index_reg, offset, seg) ( _STAD_DSZ64_ASZ16_SC1 | MEMOP_ENCODE(src, base_reg, index_reg, offset, seg) )
#define STAD_DSZ64_ASZ16_SC4_RR(src, base_reg, seg) ( _STAD_DSZ64_ASZ16_SC4 | MEMOP_ENCODE(src, base_reg, 0, 0, seg) )
#define STAD_DSZ64_ASZ16_SC4_RRR(src, base_reg, index_reg, seg) ( _STAD_DSZ64_ASZ16_SC4 | MEMOP_ENCODE(src, base_reg, index_reg, 0, seg) )
#define STAD_DSZ64_ASZ16_SC4_RRI(src, base_reg, offset, seg) ( _STAD_DSZ64_ASZ16_SC4 | MEMOP_ENCODE(src, base_reg, 0, offset, seg) )
#define STAD_DSZ64_ASZ16_SC4_RRRI(src, base_reg, index_reg, offset, seg) ( _STAD_DSZ64_ASZ16_SC4 | MEMOP_ENCODE(src, base_reg, index_reg, offset, seg) )
#define STAD_DSZ64_ASZ16_SC8_RR(src, base_reg, seg) ( _STAD_DSZ64_ASZ16_SC8 | MEMOP_ENCODE(src, base_reg, 0, 0, seg) )
#define STAD_DSZ64_ASZ16_SC8_RRR(src, base_reg, index_reg, seg) ( _STAD_DSZ64_ASZ16_SC8 | MEMOP_ENCODE(src, base_reg, index_reg, 0, seg) )
#define STAD_DSZ64_ASZ16_SC8_RRI(src, base_reg, offset, seg) ( _STAD_DSZ64_ASZ16_SC8 | MEMOP_ENCODE(src, base_reg, 0, offset, seg) )
#define STAD_DSZ64_ASZ16_SC8_RRRI(src, base_reg, index_reg, offset, seg) ( _STAD_DSZ64_ASZ16_SC8 | MEMOP_ENCODE(src, base_reg, index_reg, offset, seg) )
/** @} */
/** \defgroup SIMDLD
 *  @{
 */
#define SIMDLD_DSZ64_ASZ32_SC1_DR(dst, base_reg, seg) ( _SIMDLD_DSZ64_ASZ32_SC1 | MEMOP_ENCODE(dst, base_reg, 0, 0, seg) )
#define SIMDLD_DSZ64_ASZ32_SC1_DRR(dst, base_reg, index_reg, seg) ( _SIMDLD_DSZ64_ASZ32_SC1 | MEMOP_ENCODE(dst, base_reg, index_reg, 0, seg) )
#define SIMDLD_DSZ64_ASZ32_SC1_DRI(dst, base_reg, offset, seg) ( _SIMDLD_DSZ64_ASZ32_SC1 | MEMOP_ENCODE(dst, base_reg, 0, offset, seg) )
#define SIMDLD_DSZ64_ASZ32_SC1_DRRI(dst, base_reg, index_reg, offset, seg) ( _SIMDLD_DSZ64_ASZ32_SC1 | MEMOP_ENCODE(dst, base_reg, index_reg, offset, seg) )
/** @} */
/** \defgroup SIMDSTA
 *  @{
 */
#define SIMDSTA_DSZ64_ASZ32_SC1_RR(src, base_reg, seg) ( _SIMDSTA_DSZ64_ASZ32_SC1 | MEMOP_ENCODE(src, base_reg, 0, 0, seg) )
#define SIMDSTA_DSZ64_ASZ32_SC1_RRR(src, base_reg, index_reg, seg) ( _SIMDSTA_DSZ64_ASZ32_SC1 | MEMOP_ENCODE(src, base_reg, index_reg, 0, seg) )
#define SIMDSTA_DSZ64_ASZ32_SC1_RRI(src, base_reg, offset, seg) ( _SIMDSTA_DSZ64_ASZ32_SC1 | MEMOP_ENCODE(src, base_reg, 0, offset, seg) )
#define SIMDSTA_DSZ64_ASZ32_SC1_RRRI(src, base_reg, index_reg, offset, seg) ( _SIMDSTA_DSZ64_ASZ32_SC1 | MEMOP_ENCODE(src, base_reg, index_reg, offset, seg) )
/** @} */
/** \defgroup LEA
 *  @{
 */
#define LEA_DSZ64_ASZ64_SC1_DR(dst, base_reg, seg) ( _LEA_DSZ64_ASZ64_SC1 | MEMOP_ENCODE(dst, base_reg, 0, 0, seg) )
#define LEA_DSZ64_ASZ64_SC1_DRR(dst, base_reg, index_reg, seg) ( _LEA_DSZ64_ASZ64_SC1 | MEMOP_ENCODE(dst, base_reg, index_reg, 0, seg) )
#define LEA_DSZ64_ASZ64_SC1_DRI(dst, base_reg, offset, seg) ( _LEA_DSZ64_ASZ64_SC1 | MEMOP_ENCODE(dst, base_reg, 0, offset, seg) )
#define LEA_DSZ64_ASZ64_SC1_DRRI(dst, base_reg, index_reg, offset, seg) ( _LEA_DSZ64_ASZ64_SC1 | MEMOP_ENCODE(dst, base_reg, index_reg, offset, seg) )
#define LEA_DSZ64_ASZ64_SC4_DR(dst, base_reg, seg) ( _LEA_DSZ64_ASZ64_SC4 | MEMOP_ENCODE(dst, base_reg, 0, 0, seg) )
#define LEA_DSZ64_ASZ64_SC4_DRR(dst, base_reg, index_reg, seg) ( _LEA_DSZ64_ASZ64_SC4 | MEMOP_ENCODE(dst, base_reg, index_reg, 0, seg) )
#define LEA_DSZ64_ASZ64_SC4_DRI(dst, base_reg, offset, seg) ( _LEA_DSZ64_ASZ64_SC4 | MEMOP_ENCODE(dst, base_reg, 0, offset, seg) )
#define LEA_DSZ64_ASZ64_SC4_DRRI(dst, base_reg, index_reg, offset, seg) ( _LEA_DSZ64_ASZ64_SC4 | MEMOP_ENCODE(dst, base_reg, index_reg, offset, seg) )
#define LEA_DSZ64_ASZ64_SC8_DR(dst, base_reg, seg) ( _LEA_DSZ64_ASZ64_SC8 | MEMOP_ENCODE(dst, base_reg, 0, 0, seg) )
#define LEA_DSZ64_ASZ64_SC8_DRR(dst, base_reg, index_reg, seg) ( _LEA_DSZ64_ASZ64_SC8 | MEMOP_ENCODE(dst, base_reg, index_reg, 0, seg) )
#define LEA_DSZ64_ASZ64_SC8_DRI(dst, base_reg, offset, seg) ( _LEA_DSZ64_ASZ64_SC8 | MEMOP_ENCODE(dst, base_reg, 0, offset, seg) )
#define LEA_DSZ64_ASZ64_SC8_DRRI(dst, base_reg, index_reg, offset, seg) ( _LEA_DSZ64_ASZ64_SC8 | MEMOP_ENCODE(dst, base_reg, index_reg, offset, seg) )
#define LEA_DSZ64_ASZ32_SC1_DR(dst, base_reg, seg) ( _LEA_DSZ64_ASZ32_SC1 | MEMOP_ENCODE(dst, base_reg, 0, 0, seg) )
#define LEA_DSZ64_ASZ32_SC1_DRR(dst, base_reg, index_reg, seg) ( _LEA_DSZ64_ASZ32_SC1 | MEMOP_ENCODE(dst, base_reg, index_reg, 0, seg) )
#define LEA_DSZ64_ASZ32_SC1_DRI(dst, base_reg, offset, seg) ( _LEA_DSZ64_ASZ32_SC1 | MEMOP_ENCODE(dst, base_reg, 0, offset, seg) )
#define LEA_DSZ64_ASZ32_SC1_DRRI(dst, base_reg, index_reg, offset, seg) ( _LEA_DSZ64_ASZ32_SC1 | MEMOP_ENCODE(dst, base_reg, index_reg, offset, seg) )
#define LEA_DSZ64_ASZ32_SC4_DR(dst, base_reg, seg) ( _LEA_DSZ64_ASZ32_SC4 | MEMOP_ENCODE(dst, base_reg, 0, 0, seg) )
#define LEA_DSZ64_ASZ32_SC4_DRR(dst, base_reg, index_reg, seg) ( _LEA_DSZ64_ASZ32_SC4 | MEMOP_ENCODE(dst, base_reg, index_reg, 0, seg) )
#define LEA_DSZ64_ASZ32_SC4_DRI(dst, base_reg, offset, seg) ( _LEA_DSZ64_ASZ32_SC4 | MEMOP_ENCODE(dst, base_reg, 0, offset, seg) )
#define LEA_DSZ64_ASZ32_SC4_DRRI(dst, base_reg, index_reg, offset, seg) ( _LEA_DSZ64_ASZ32_SC4 | MEMOP_ENCODE(dst, base_reg, index_reg, offset, seg) )
#define LEA_DSZ64_ASZ32_SC8_DR(dst, base_reg, seg) ( _LEA_DSZ64_ASZ32_SC8 | MEMOP_ENCODE(dst, base_reg, 0, 0, seg) )
#define LEA_DSZ64_ASZ32_SC8_DRR(dst, base_reg, index_reg, seg) ( _LEA_DSZ64_ASZ32_SC8 | MEMOP_ENCODE(dst, base_reg, index_reg, 0, seg) )
#define LEA_DSZ64_ASZ32_SC8_DRI(dst, base_reg, offset, seg) ( _LEA_DSZ64_ASZ32_SC8 | MEMOP_ENCODE(dst, base_reg, 0, offset, seg) )
#define LEA_DSZ64_ASZ32_SC8_DRRI(dst, base_reg, index_reg, offset, seg) ( _LEA_DSZ64_ASZ32_SC8 | MEMOP_ENCODE(dst, base_reg, index_reg, offset, seg) )
#define LEA_DSZ64_ASZ16_SC1_DR(dst, base_reg, seg) ( _LEA_DSZ64_ASZ16_SC1 | MEMOP_ENCODE(dst, base_reg, 0, 0, seg) )
#define LEA_DSZ64_ASZ16_SC1_DRR(dst, base_reg, index_reg, seg) ( _LEA_DSZ64_ASZ16_SC1 | MEMOP_ENCODE(dst, base_reg, index_reg, 0, seg) )
#define LEA_DSZ64_ASZ16_SC1_DRI(dst, base_reg, offset, seg) ( _LEA_DSZ64_ASZ16_SC1 | MEMOP_ENCODE(dst, base_reg, 0, offset, seg) )
#define LEA_DSZ64_ASZ16_SC1_DRRI(dst, base_reg, index_reg, offset, seg) ( _LEA_DSZ64_ASZ16_SC1 | MEMOP_ENCODE(dst, base_reg, index_reg, offset, seg) )
#define LEA_DSZ64_ASZ16_SC4_DR(dst, base_reg, seg) ( _LEA_DSZ64_ASZ16_SC4 | MEMOP_ENCODE(dst, base_reg, 0, 0, seg) )
#define LEA_DSZ64_ASZ16_SC4_DRR(dst, base_reg, index_reg, seg) ( _LEA_DSZ64_ASZ16_SC4 | MEMOP_ENCODE(dst, base_reg, index_reg, 0, seg) )
#define LEA_DSZ64_ASZ16_SC4_DRI(dst, base_reg, offset, seg) ( _LEA_DSZ64_ASZ16_SC4 | MEMOP_ENCODE(dst, base_reg, 0, offset, seg) )
#define LEA_DSZ64_ASZ16_SC4_DRRI(dst, base_reg, index_reg, offset, seg) ( _LEA_DSZ64_ASZ16_SC4 | MEMOP_ENCODE(dst, base_reg, index_reg, offset, seg) )
#define LEA_DSZ64_ASZ16_SC8_DR(dst, base_reg, seg) ( _LEA_DSZ64_ASZ16_SC8 | MEMOP_ENCODE(dst, base_reg, 0, 0, seg) )
#define LEA_DSZ64_ASZ16_SC8_DRR(dst, base_reg, index_reg, seg) ( _LEA_DSZ64_ASZ16_SC8 | MEMOP_ENCODE(dst, base_reg, index_reg, 0, seg) )
#define LEA_DSZ64_ASZ16_SC8_DRI(dst, base_reg, offset, seg) ( _LEA_DSZ64_ASZ16_SC8 | MEMOP_ENCODE(dst, base_reg, 0, offset, seg) )
#define LEA_DSZ64_ASZ16_SC8_DRRI(dst, base_reg, index_reg, offset, seg) ( _LEA_DSZ64_ASZ16_SC8 | MEMOP_ENCODE(dst, base_reg, index_reg, offset, seg) )
/** @} */
